#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace

####################################################################################################
# Declare functionality for generating BASH scripts

generateBashComment () {
  # Generate comment having text $2 in BASH script $1
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'script file'
  parameterRequire "$2" 2 'comment text'

  cat >>$1 <<HERE
# $2
HERE
} && export -f generateBashComment

generateBashCommentHeader () {
  # Generate comment header in BASH script $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'script file'

  cat >>$1 <<HERE

################################################################################
HERE
} && export -f generateBashCommentHeader

generateBashDebuggingComment () {
  # Generate debugging comment in BASH script $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'script file'

  generateBashCommentHeader $1
  generateBashComment       $1 'NOTE: Uncomment the following two lines for debugging'
  generateBashComment       $1 'set -o verbose'
  generateBashComment       $1 'set -o xtrace'
} && export -f generateBashDebuggingComment

generateBashPrologueNonsourced () {
  # Generate prologue in BASH script $1 that is designed NOT to be 'source'd
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  cat >$1 <<'HERE'
#!/bin/bash
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
################################################################################
HERE
  generateBashComment $1 'Generated by Rob.Williams@couchbase.com'
  generateBashComment $1 'NOTE: Assumes this project has been activated using the BriteOnyx framework.'
} && export -f generateBashPrologueNonsourced

generateBashPrologueSourced () {
  # Generate prologue in BASH script $1 that is designed to be 'source'd
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  cat >$1 <<'HERE'
#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
################################################################################
HERE
  generateBashComment $1 'Generated by Rob.Williams@couchbase.com'
  generateBashComment $1 'NOTE: Assumes this project has been activated using the BriteOnyx framework.'
} && export -f generateBashPrologueSourced

generateBashSourceScript () {
  # Call ('source') BASH script $2 from BASH script $1
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'calling script file'
  parameterRequire "$2" 2 'called script file'

  cat >>$1 <<HERE
Script=$2
scriptRequire \$Script ; source \$Script ; abortOnFail \$?
HERE
} && export -f generateBashSourceScript

generateNote () {
  # Generate note $2 to be logged in script $1
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'script file'
  parameterRequire "$2" 2 'note'

  cat >>$1 <<HERE
  logInfo 'NOTE: $2'
HERE
} && export -f generateNote

valueAssign () {
  # Assign environment variable $2 to value $3 in script $1
  parametersRequire 3 "$#"
  parameterRequire "$1" 1 'script file'
  parameterRequire "$2" 2 'variable name'
  parameterRequire "$3" 2 'value'

  echo "$2=\"$3\"" >>$1
} && export -f valueAssign

variableAssign () {
  # Assign environment variable $2 to its current value in script $1
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'script file'
  parameterRequire "$2" 2 'variable name'

  variableRequire $2
  valueAssign $1 $2 "${!2}"
} && export -f variableAssign

################################################################################
: <<'DisabledContent'
DisabledContent
