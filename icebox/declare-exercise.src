#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace

####################################################################################################
# Declare functionality for generating exercises

exerciseAssignVariables () {
  # Assign environment variables for current exercise in script $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'script file'

  generateBashCommentHeader $1
  variableAssign $1 CB_Exercise
  variableAssign $1 CB_ExerciseId
  variableAssign $1 CB_ExerciseKind
  variableAssign $1 CB_ExerciseNameLong
  variableAssign $1 CB_ExerciseNameShort
  variableAssign $1 CB_ExerciseNumber
} && export -f exerciseAssignVariables

exerciseBegan () {
  # Current exercise began in script $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'script file'

  generateBashCommentHeader $1
  cat >>$1 <<HERE
variableRequire CB_Exercise
variableRequire CB_ExerciseId
variableRequire CB_ExerciseKind
variableRequire CB_ExerciseNameLong
variableRequire CB_ExerciseNameShort
variableRequire CB_ExerciseNumber
HERE
} && export -f exerciseBegan

exerciseConfigure () {
  # Configure using current exercise environment script in script $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'script file'

  generateBashCommentHeader $1
  generateBashComment       $1 'Configure for this exercise'
  generateBashSourceScript  $1 "\$This/env.bash"
} && export -f exerciseConfigure

exerciseFunctionMainCall () {
  # Call function 'main' in script $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'script file'

  cat >>$1 <<HERE

main
HERE
} && export -f exerciseFunctionMainCall

exerciseFunctionMainEpilogue () {
  # Generate epilogue in script $1 for function 'main'
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  cat >>$1 <<HERE
}
HERE
} && export -f exerciseFunctionMainEpilogue

exerciseFunctionMainPrologue () {
  # Generate prologue in script $1 for function 'main'
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  generateBashCommentHeader $1
  cat >>$1 <<HERE

main () {
  parametersRequire 0 \$#
HERE
} && export -f exerciseFunctionMainPrologue

generateScriptEpilogueForBook () {
  # Generate epilogue in workbook script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'
} && export -f generateScriptEpilogueForBook

generateScriptEpilogueForDrop () {
  # Generate epilogue in drop script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  exerciseFunctionMainEpilogue $1
  generateBashDebuggingComment $1
  exerciseFunctionMainCall     $1
} && export -f generateScriptEpilogueForDrop

generateScriptEpilogueForEnv () {
  # Generate epilogue in environment script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'
} && export -f generateScriptEpilogueForEnv

generateScriptEpilogueForRun () {
  # Generate epilogue in run script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  exerciseFunctionMainEpilogue $1
  generateBashDebuggingComment $1
  exerciseFunctionMainCall     $1
} && export -f generateScriptEpilogueForRun

generateScriptEpilogueForUndo () {
  # Generate epilogue in undo script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  exerciseFunctionMainEpilogue $1
  generateBashDebuggingComment $1
  exerciseFunctionMainCall     $1
} && export -f generateScriptEpilogueForUndo

generateScriptEpilogues () {
  # Generate epilogues in all scripts for current exercise
  parametersRequire 0 $#

  variableRequire ScriptBook
  variableRequire ScriptDrop
  variableRequire ScriptEnv
  variableRequire ScriptRun
  variableRequire ScriptUndo

  generateScriptEpilogueForBook $ScriptBook
  generateScriptEpilogueForDrop $ScriptDrop
  generateScriptEpilogueForEnv  $ScriptEnv
  generateScriptEpilogueForRun  $ScriptRun
  generateScriptEpilogueForUndo $ScriptUndo
} && export -f generateScriptEpilogues

generateScriptPrologueForBook () {
  # Generate prologue in workbook script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  variableRequire CB_ExerciseKind
  variableRequire CB_ExerciseNameLong

  cat >$1 <<HERE
$CB_ExerciseKind exercise '$CB_ExerciseNameLong'
generated by Rob.Williams@couchbase.com
HERE
} && export -f generateScriptPrologueForBook

generateScriptPrologueForDrop () {
  # Generate prologue in drop script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  generateBashPrologueNonsourced $1
  generateScriptReferences       $1
  exerciseConfigure              $1
  exerciseBegan                  $1
  exerciseFunctionMainPrologue   $1
} && export -f generateScriptPrologueForDrop

generateScriptPrologueForEnv () {
  # Generate prologue in environment script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  generateBashPrologueSourced $1
  exerciseAssignVariables     $1
} && export -f generateScriptPrologueForEnv

generateScriptPrologueForRun () {
  # Generate prologue in run script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  generateBashPrologueNonsourced $1
  generateScriptReferences       $1
  exerciseConfigure              $1
  exerciseBegan                  $1
  exerciseFunctionMainPrologue   $1
} && export -f generateScriptPrologueForRun

generateScriptPrologueForUndo () {
  # Generate prologue in undo script $1 for current exercise
  parametersRequire 1 $#
  parameterRequire "$1" 1 'script file'

  generateBashPrologueNonsourced $1
  generateScriptReferences       $1
  exerciseConfigure              $1
  exerciseBegan                  $1
  exerciseFunctionMainPrologue   $1
} && export -f generateScriptPrologueForUndo

generateScriptPrologues () {
  # Generate prologues in all scripts for current exercise
  parametersRequire 0 $#

  variableRequire ScriptBook
  variableRequire ScriptDrop
  variableRequire ScriptEnv
  variableRequire ScriptRun
  variableRequire ScriptUndo

  generateScriptPrologueForBook $ScriptBook
  generateScriptPrologueForDrop $ScriptDrop
  generateScriptPrologueForEnv  $ScriptEnv
  generateScriptPrologueForRun  $ScriptRun
  generateScriptPrologueForUndo $ScriptUndo
} && export -f generateScriptPrologues

generateScriptReferences () {
  # Generate references in script $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'script file'

  generateBashCommentHeader $1
  generateBashComment       $1 'Reference our script context'
  cat >>$1 <<HERE
Self="\$(getPathAbsolute \$BASH_SOURCE)" ; abortOnFail \$?
This="\$(dirname \$Self)"                ; abortOnFail \$?
HERE
} && export -f generateScriptReferences

getExerciseScriptFile () {
  # Return absolute pathname of script file $1 in current exercise
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'basename of script file'

  variableRequire DirGenExercise
  echo "$DirGenExercise/$1"
} && export -f getExerciseScriptFile

getFormattedExerciseNumber () {
  # Return exercise number $1 formatted for various uses
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'integer exercise number'

  printf "%02d" $1
} && export -f getFormattedExerciseNumber

getFormattedStepNumber () {
  # Return step number $1 formatted for various uses
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'integer step number'

  printf "%02d" $1
} && export -f getFormattedStepNumber

proseAdd () {
  # Add prose $3 for step $2 in workbook file $1
  parametersRequire 3 "$#"
  parameterRequire "$1" 1 'workbook file'
  parameterRequire "$2" 2 'step number'
  parameterRequire "$3" 3 'step prose (text)'

  generateBashCommentHeader $1
  generateBashComment       $1 "Step $2:"
  cat >>$1 <<HERE

$3
HERE
} && export -f proseAdd

stepBegan () {
  # Began step $2 for current exercise in script $1
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'script file'
  parameterRequire "$2" 2 'step number'

  cat >>$1 <<HERE

  #-----------------------------------------------------------------------------
  logInfo "\$CB_Exercise Step $2"
HERE
} && export -f stepBegan

stepEnded () {
  # Ended step $2 for executing N1QL in workbook file $1
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'workbook file'
  parameterRequire "$2" 2 'step number'

  variableRequire   DirGenExercise
  directoryRequire $DirGenExercise
  fileRequire      $DirGenExercise/Step$2.n1ql

  cat >>$1 <<HERE

'Step$2.n1ql':
HERE
  cat $DirGenExercise/Step$2.n1ql >>$1
} && export -f stepEnded

################################################################################
: <<'DisabledContent'
DisabledContent
