#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace
# TODO: SOMEDAY: Add inverse commands to isolate debugging

####################################################################################################
# Activate the BriteOnyx framework to manage this project directory tree
#
# NOTE: This script, and EVERY script that it calls, must NOT invoke 'exit'!  The user calling this
#   script must be allowed to preserve their shell and every effort must be made to inform the user
#   of problems while continuing execution where possible.  Terminating the shell robs the user of
#   useful feedback and interrupts their work, which is unacceptable.  Instead, the BASH 'return'
#   statement should be invoked to end execution with an appropriate status code.
#
# TODO: SOMEDAY: Verify that $BO_Project does indeed point to the root of our project directory tree

####################################################################################################
# NOTE: ABORT: if project is already activated
[[ -n "$BO_Project" ]] && echo "FATAL: Project '$BO_Project' is already activated, aborting" && exit 100

# Create random TMPDIR
Dir=$(mktemp --tmpdir -d BO-XXXXXXXX)
[[ -d "$Dir" ]] && export TMPDIR=$Dir

# Initialize BriteOnyx logging file
BO_FileLog=BO.log
if [[ -n "$TMPDIR" ]] ; then
  export BO_FileLog=$TMPDIR/$BO_FileLog
elif [[ -n "$BO_Project" ]] ; then
  export BO_FileLog=$BO_Project/$BO_FileLog
else
  export BO_FileLog=$PWD/$BO_FileLog
fi
echo "INFO:  Activating..." >$BO_FileLog
echo "INFO:  Activating the BriteOnyx framework for this project..."
echo "WARN:  This script MUST be executed as 'source activate.src', WAS IT?"

# Capture incoming BASH environment
if [[ -n "$TMPDIR" ]] ; then
  env | sort > $TMPDIR/BO-env-incoming.out
elif [[ -n "$BO_Project" ]] ; then
  env | sort > $BO_Project/BO-env-incoming.out
else
  env | sort > $PWD/BO-env-incoming.out
fi

####################################################################################################
# Remember the directory containing this script as our project root

export BO_Project="$(dirname $BASH_SOURCE)"

# TODO: REVIEW: Shall we NOT cd into our project directory since it changes
# the caller's execution environment?
# cd "$BO_Project" || return $?

####################################################################################################
# Declare BriteOnyx support functionality

Script="$BO_Project/BriteOnyx/declare.src"
[[ ! -f "$Script" ]] && echo "FATAL: Missing script '$Script'" && return 63
source "$Script" ; Status=$?
[[ "$Status" -ne 0 ]] && echo "FATAL: Script exited with '$Status'" && return $Status

####################################################################################################
# NOTE: Now that we have our support functionality declared, we can use it from here on

boVariableRequire 'BO_Project' || boFailed "$0" "$LINENO" $? || return $?
boTraceVariable 'BO_Project'
export BO_Project="$(boNodeCanonical $BO_Project)"
boTraceVariable 'BO_Project'
boLogInfo "Canonical form of BO_Project directory pathname is '$BO_Project'"
boDirectoryRequire "$BO_Project" || boFailed "$0" "$LINENO" $? || return $?

####################################################################################################
# Copy starter files into place as necessary

DirSrc=$BO_Project/BriteOnyx/starter

boVariableRequire HOME
DirTgt=$HOME
[[ ! -e "$DirTgt" ]] && mkdir -p $DirTgt

FileTgt=$DirTgt/.BriteOnyx.src
# Move previous scripts to new path
[[ -f "$DirTgt/BriteOnyx.src" ]] && mv $DirTgt/BriteOnyx.src $FileTgt
[[ -f "$DirTgt/BriteOnyx-env.bash" ]] && mv $DirTgt/BriteOnyx-env.bash $FileTgt
[[ -f "$DirTgt/BriteOnyx-env.src" ]] && mv $DirTgt/BriteOnyx-env.src $FileTgt
# Copy starter script, if necessary
[[ ! -f "$FileTgt" ]] && cp $DirSrc/user-BriteOnyx.src $FileTgt

DirTgt=$BO_Project
[[ ! -e "$DirTgt" ]] && mkdir -p $DirTgt

FileTgt=$DirTgt/env.src
[[ ! -f "$FileTgt" ]] && cp $DirSrc/project-env.src $FileTgt

FileTgt=$DirTgt/.hgignore
[[ ! -f "$FileTgt" ]] && cp $DirSrc/project.hgignore $FileTgt

DirTgt=$BO_Project/bin
[[ ! -e "$DirTgt" ]] && mkdir -p $DirTgt

FileTgt=$DirTgt/project-fix-permissions.bash
# Move previous scripts to new path
[[ -f "$DirTgt/all-fix-permissions.bash" ]] && mv $DirTgt/all-fix-permissions.bash $FileTgt
# Copy starter script, if necessary
[[ ! -f "$FileTgt" ]] && cp $DirSrc/project-fix-permissions.bash $FileTgt

: <<'DisabledContent'
FileTgt=$DirTgt/declare.src
[[ ! -f "$FileTgt" ]] && cp $DirSrc/project-declare.src $FileTgt

FileTgt=$DirTgt/development.rst
[[ ! -f "$FileTgt" ]] && cp $DirSrc/project-development.rst $FileTgt

FileTgt=$DirTgt/README.rst
[[ ! -f "$FileTgt" ]] && cp $DirSrc/project-README.rst $FileTgt

DirTgt=$BO_Project/bin/helper/Linux
[[ ! -e "$DirTgt" ]] && mkdir -p $DirTgt

FileTgt=$DirTgt/declare-BASH.src
[[ ! -f "$FileTgt" ]] && cp $DirSrc/project-declare-BASH.src $FileTgt
DisabledContent

####################################################################################################
# Configure for this user

Script=$HOME/.BriteOnyx.src
boScriptRequire "$Script" || boFailed "$0" "$LINENO" $? || return $?
source          "$Script" || boFailed "$0" "$LINENO" $? || return $?

####################################################################################################
# Configure for this project

Script=$BO_Project/env.src
boScriptRequire "$Script" || boFailed "$0" "$LINENO" $? || return $?
source          "$Script" || boFailed "$0" "$LINENO" $? || return $?

####################################################################################################
# Configure for BriteOnyx

Script="$BO_Project/BriteOnyx/env.src"
boScriptRequire "$Script" || boFailed "$0" "$LINENO" $? || return $?
source          "$Script" || boFailed "$0" "$LINENO" $? || return $?

####################################################################################################
# Verify BriteOnyx bootstrap configuration

boVariableRequire BO_Home || boFailed "$0" "$LINENO" $? || return $?
boDirectoryRequire "$BO_Home" || boFailed "$0" "$LINENO" $? || return $?

boVariableRequire BO_ProjectName || boFailed "$0" "$LINENO" $? || return $?

####################################################################################################
# Remember PATH

[[ -z "$BO_PathSystem" ]] && \
  export BO_PathSystem=$PATH && \
  echo "INFO:  Remembering BO_PathSystem='$BO_PathSystem'"

####################################################################################################
# Activate as a Linux project

Script="$BO_Home/helper/activation/activate.src"
boScriptRequire "$Script" || boFailed "$0" "$LINENO" $? || return $?
source          "$Script" || boFailed "$0" "$LINENO" $? || return $?

####################################################################################################
# Set TMPDIR 
# DISABLED: MOVED: to Linux activation script

# export TMPDIR=$TMPDIR/$BO_ProjectName
# echo "INFO:  Remembering TMPDIR='$TMPDIR'"

####################################################################################################
# Declare optional project functionality

Script="$BO_Project/declare.src"
if [[ -f "$Script" ]] ; then
  source "$Script" ; Status=$?
  [[ "$Status" -ne 0 ]] && echo "FATAL: Script exited with '$Status'" && return $Status
fi

####################################################################################################
# Demonstrate logging

logDebug "EXAMPLE: This is a debugging message"
logInfo "EXAMPLE: This is an informational message"
logWarn "EXAMPLE: This is a warning message"
logError "EXAMPLE: This is an error message"
_logFatal ""EXAMPLE: This is a fatal message"

####################################################################################################
# Shutdown

logInfo "Project '$BO_ProjectName' in directory '$BO_Project' is now activated, done."

# Capture outgoing BASH environment
if [[ -n "$TMPDIR" ]] ; then
  env | sort > $TMPDIR/BO-env-outgoing.out
elif [[ -n "$BO_Project" ]] ; then
  env | sort > $BO_Project/BO-env-outgoing.out
else
  env | sort > $PWD/BO-env-outgoing.out
fi

####################################################################################################
: <<'DisabledContent'
DisabledContent
