#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"

###################################################################################################
# NOTE: By convention, BriteOnyx is configured via environment variables prefixed by 'BO_'.
#
# TODO: Ensure that we do not clone a Mercurial repository inside another

boVariableRequire 'BO_Project' || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

###################################################################################################
# Configure for BriteOnyx

Script="$BO_Project/BriteOnyx/env.src"
boScriptRequire "${Script}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
source          "${Script}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

###################################################################################################
# Configure for this project

Script="$BO_Project/project-env.src"
boScriptRequire "${Script}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
source          "${Script}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

###################################################################################################
# Configure for this user

Script="$HOME/BriteOnyx-env.src"
[[ ! -f ${Script} ]] && cp "$BO_Project/BriteOnyx/sample-BriteOnyx-env.src" "${Script}"
boScriptRequire "${Script}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
source          "${Script}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

###################################################################################################
# Verify BriteOnyx bootstrap configuration

boVariableRequire 'BO_Parent'  || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
boVariableRequire 'BOUrl'     || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
boVariableRequire 'BOVersion' || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

###################################################################################################
# Checkout the BriteOnyx source

boDirectoryCreate "$BO_Parent" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

[[ -z "$BO_Home" ]] && export BO_Home=$(boNodeCanonical "$BO_Parent/$BOVersion")
boVariableRequire 'BO_Home' || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

if boDirectoryExists "$BO_Home"; then
  boLogDebug "Directory '$BO_Home' already exists, skipping Mercurial clone."
elif [[ "$BOVersion" == "predeployed" ]]; then
  boLogWarn "Ignoring Mercurial clone of version '$BOVersion'"
else
  boLogInfo "Cloning version '$BOVersion' from '$BOUrl' into '$BO_Home'..."
  Cmd="hg clone"
  Cmd+=" --rev $BOVersion"
  Cmd+=" $BOUrl"
  Cmd+=" $BO_Home"
  Msg="Mercurial failed to clone into directory '$BO_Home'!"
  boExecute "${Cmd}" "${Msg}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
fi

boDirectoryRequire "$BO_Home" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

if [[ "$BOVersion" == "tip" ]]; then
  # Update Mercurial clone of 'tip' to support development of BriteOnyx framework
  boLogInfo "Updating clone of version '$BOVersion' from '$BOUrl' into '$BO_Home'..."
  cd "$BO_Home" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
  Cmd="hg pull --update"
  Msg="Mercurial failed to update clone in directory '$BO_Home'!"
  boExecute "${Cmd}" "${Msg}" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
else
  boLogDebug "BriteOnyx version '$BOVersion' should be stable, skipping update of clone."
fi

###################################################################################################
# Return, but do NOT exit, with a success code
return 0

###################################################################################################
: <<'DisabledContent'
DisabledContent
