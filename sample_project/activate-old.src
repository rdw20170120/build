#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace
# TODO: SOMEDAY: Add inverse commands to isolate debugging

####################################################################################################
# Activate the BriteOnyx framework to manage this project directory tree
#
# NOTE: This script, and EVERY script that it calls, must NOT invoke 'exit'!  The user calling this
#   script must be allowed to preserve their shell and every effort must be made to inform the user
#   of problems while continuing execution where possible.  Terminating the shell robs the user of
#   useful feedback and interrupts their work, which is unacceptable.  Instead, the BASH 'return'
#   statement should be invoked to end execution with an appropriate status code.
#
# TODO: Verify that $BO_Project does indeed point to the root of our project directory tree

####################################################################################################
# Startup

echo "INFO:  Activating the BriteOnyx framework for this project..."
echo "WARN:  This script MUST be executed as 'source activate.src', WAS IT?"
env | sort > "./BO-env-incoming.out"

####################################################################################################
# Remember the directory containing this script as our project root

# TODO: Should we replicate this approach elsewhere for accessing $BASH_SOURCE?
export BO_Project="$(dirname $BASH_SOURCE[0])"

# TODO: REVIEW: Shall we NOT cd into our project directory since it changes
# the caller's execution environment?
# cd "$BO_Project" || return $?

####################################################################################################
# Declare BriteOnyx support functionality

Script="$BO_Project/BriteOnyx/declare.src"
[[ ! -f "$Script" ]] && echo "FATAL: Missing script '$Script'" && return 63
source "$Script" ; Status=$?
[[ "${Status}" -ne 0 ]] && echo "FATAL: Script exited with '${Status}'" && return ${Status}

####################################################################################################
# NOTE: Now that we have our support functionality declared, we can use it from here on

boVariableRequire 'BO_Project' || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
boTraceVariable 'BO_Project'
export BO_Project="$(boNodeCanonical $BO_Project)"
boTraceVariable 'BO_Project'
boLogInfo "Canonical form of BO_Project directory pathname is '$BO_Project'"
boDirectoryRequire "$BO_Project" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

####################################################################################################
# Bootstrap BriteOnyx

Script="$BO_Project/BriteOnyx/bootstrap.src"
boScriptRequire "$Script" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
source          "$Script" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

####################################################################################################
# Activate as a Linux project

Script="$BO_Home/activation/Linux/activate.src"
boScriptRequire "$Script" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
source          "$Script" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

####################################################################################################
# Ensure that we are in our project root directory

cd "$BO_Project" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

####################################################################################################
# Fix file permissions throughout project

Script="$BO_Project/bin/Linux/all-fix-permissions.bash"
boScriptRequire "$Script" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?
                "$Script" || boFailed "$BASH_SOURCE" "$LINENO" $? || return $?

####################################################################################################
# Declare optional project functionality

Script="$BO_Project/declare.src"
if [[ -f "$Script" ]] ; then
  source "$Script" ; Status=$?
  [[ "${Status}" -ne 0 ]] && echo "FATAL: Script exited with '${Status}'" && return ${Status}
fi

####################################################################################################
# Demonstrate logging

logDebug  "EXAMPLE: This is a debugging message"
logInfo   "EXAMPLE: This is an informational message"
logWarn   "EXAMPLE: This is a warning message"
logError  "EXAMPLE: This is an error message"
_logFatal "EXAMPLE: This is a fatal message"

####################################################################################################
# Shutdown

logInfo "Project '$BO_Project' is now activated, done."
env | sort > "./BO-env-outgoing.out"

####################################################################################################
# Successfully 'return', but do NOT 'exit'
return 0

####################################################################################################
: <<'DisabledContent'
# Activate as a Gradle project
Script="$BO_Home/activation/Gradle/activate.src"

# Activate as a Python project
Script="$BO_Home/activation/Python/activate.src"
DisabledContent
