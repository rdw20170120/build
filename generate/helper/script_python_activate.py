import script_bash
import script_briteonyx

from throw_out_your_templates_3_core_visitor_map import VisitorMap


class Script(script_briteonyx.Script):
    def __init__(self):
        script_briteonyx.Script.__init__(self)

    def generate(self):
        self.add_source_header()
        self.note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
        self.rule()
        self.note('Uncomment the following two lines for debugging')
        self.comment('set -o verbose')
        self.comment('set -o xtrace')
        self.someday('Add inverse commands to isolate debugging')
        self.line()
        self.rule()
        self.comment('Verify pre-conditions')
        self.line()
        self.text('[[   -z "$BO_Home"        ]] &&')
        self.text(''' echo 'FATAL: Missing $BO_Home'                &&''')
        self.line(' return 63')
        self.text('[[ ! -d "$BO_Home"        ]] &&')
        self.text(''' echo "FATAL: Missing directory '$BO_Home'"    &&''')
        self.line(' return 63')
        self.text('[[   -z "$BO_Project"     ]] &&')
        self.text(''' echo 'FATAL: Missing $BO_Project'             &&''')
        self.line(' return 63')
        self.text('[[ ! -d "$BO_Project"     ]] &&')
        self.text(''' echo "FATAL: Missing directory '$BO_Project'" &&''')
        self.line(' return 63')
        self.text('[[   -z "$BO_HomePackage" ]] &&')
        self.text(''' echo 'FATAL: Missing $BO_HomePackage'         &&''')
        self.line(' return 63')
        self.text('[[   -z "$BO_PathSystem"  ]] &&')
        self.text(''' echo 'FATAL: Missing $BO_PathSystem'          &&''')
        self.line(' return 63')
        self.line()
        self.line('Dir=$BO_Home/activation')
        self.text('[[ ! -d "${Dir}" ]] &&')
        self.text(''' echo "FATAL: Missing directory '${Dir}'" &&''')
        self.line(' return 63')
        self.line()
        self.rule()
        self.comment('Configure environment for Linux')
        self.line()
        self.line('Script=${Dir}/activate.src')
        self.text('[[ ! -f "${Script}" ]] &&')
        self.text(''' echo "FATAL: Missing script '${Script}'" &&''')
        self.line(' return 63')
        self.line()
        self.line('source ${Script}')
        self.line()
        self.line('Status=$?')
        self.text('[[ ${Status} -ne 0 ]] &&')
        self.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
        self.line(' return ${Status}')
        self.line()
        self.rule()
        self.comment('Verify post-conditions')
        self.line()
        self.text('[[ -z "$BO_E_Config"  ]] &&')
        self.text(''' echo 'FATAL: Missing $BO_E_Config'  &&''')
        self.line(' return 63')
        self.text('[[ -z "$BO_E_Ok"      ]] &&')
        self.text(''' echo 'FATAL: Missing $BO_E_Ok'      &&''')
        self.line(' return "$BO_E_Config"')
        self.text('[[ -z "$BO_PathLinux" ]] &&')
        self.text(''' echo 'FATAL: Missing $BO_PathLinux' &&''')
        self.line(' return "$BO_E_Config"')
        self.line()
        self.rule()
        self.comment('Configure environment for Python on Linux')
        self.line()
        self.line('DirPVE=$BO_Project/PVE')
        self.line('export BO_PathProject=$BO_PathProject:${DirPVE}/bin')
        self.line('export BO_PathPython=$BO_Home/invocation/Python')
        self.line()
        self.line('PATH=${BO_PathProject}')
        self.line('PATH=$PATH:${BO_PathPython}')
        self.line('PATH=$PATH:${BO_PathLinux}')
        self.line('PATH=$PATH:${BO_PathSystem}')
        self.line('export PATH')
        self.line()
        self.rule()
        self.comment('Configure PIP_DOWNLOAD_CACHE')
        self.line()
        self.text('if [[ -z "$PIP_DOWNLOAD_CACHE" ]];')
        self.line(' then')
        self.line("  echo 'WARN: Missing $PIP_DOWNLOAD_CACHE'")
        self.text('  [[ -z "$PIP_DOWNLOAD_CACHE" ]] &&')
        self.text(' [[ -n "$TMPDIR" ]] &&')
        self.line(' export PIP_DOWNLOAD_CACHE="$TMPDIR/pip"')
        self.text('  [[ -z "$PIP_DOWNLOAD_CACHE" ]] &&')
        self.text(''' echo 'FATAL: Missing $PIP_DOWNLOAD_CACHE' &&''')
        self.line(' return 63')
        self.line('''  echo "INFO: Remembering PIP_DOWNLOAD_CACHE='$PIP_DOWNLOAD_CACHE'"''')
        self.line('fi')
        self.text('[[ ! -d "$PIP_DOWNLOAD_CACHE" ]] &&')
        self.line(' mkdir -p "$PIP_DOWNLOAD_CACHE"')
        self.text('[[ ! -d "$PIP_DOWNLOAD_CACHE" ]] &&')
        self.text(''' echo "FATAL: Missing directory '$PIP_DOWNLOAD_CACHE'" &&''')
        self.line(' return 63')
        self.line()
        self.rule()
        self.comment('Configure Python virtual environment (PVE)')
        self.line()
        self.line('export PIP_REQUIRE_VIRTUALENV=true')
        self.line('export PIP_RESPECT_VIRTUALENV=true')
        self.line()
        self.line('Script=${DirPVE}/bin/activate')
        self.text('if [[ ! -f "${Script}" ]];')
        self.line(' then')
        self.line('  # If the virtual environment does not already exist, create it')
        self.line('  # TODO: This code assumes that the Python virtual environment package is')
        self.line('  # already installed, but it may not be.  Eventually we should handle that,')
        self.line('  # either with a more-specific message or by actually installing it.')
        self.line('''  echo "WARN: Creating Python virtual environment (PVE) in '${DirPVE}'"''')
        self.line('''  echo "WARN: This requires the 'python-virtualenv' package to have been installed"''')
        self.line('  virtualenv "${DirPVE}"')
        self.line('  Status=$?')
        self.text('  [[ ${Status} -ne 0 ]] &&')
        self.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
        self.line(' return ${Status}')
        self.line('fi')
        self.line()
        self.text('[[ ! -d "${DirPVE}" ]] &&')
        self.text(''' echo "FATAL: Missing directory '${DirPVE}'" &&''')
        self.line(' return 63')
        self.text('[[ ! -f "${Script}" ]] &&')
        self.text(''' echo "FATAL: Missing script '${Script}'" &&''')
        self.line(' return 63')
        self.line()
        self.line('source ${Script}')
        self.line()
        self.line('Status=$?')
        self.text('[[ ${Status} -ne 0 ]] &&')
        self.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
        self.line(' return ${Status}')
        self.line()
        self.text('[[ -z "$VIRTUAL_ENV" ]] &&')
        self.text(''' echo 'FATAL: Missing $VIRTUAL_ENV' &&''')
        self.line(' return 63')
        self.line('export PYTHONHOME=$VIRTUAL_ENV')
        self.text('[[ -z "$PYTHONHOME"  ]] &&')
        self.text(''' echo 'FATAL: Missing $PYTHONHOME'  &&''')
        self.line(' return 63')
        self.line()
        self.line('''echo "INFO: Activated Python virtual environment (PVE) in '${DirPVE}'"''')
        self.line('''echo "INFO: Found '$(python --version 2>&1)' at '$(which python)'"''')
        self.add_disabled_content_footer()


VISITOR_MAP = VisitorMap(parent_map=script_bash.VISITOR_MAP)


def build():
    script = Script()
    script.generate()
    return script
    
def render(target_directory, target_file):
    script_bash.render(build(), VISITOR_MAP, target_directory, target_file)


""" Disabled content
"""

