#!/usr/bin/env python

import argparse
import os
import sys

from logging import getLogger
from my_logging import configure_logging
from my_system import maybe_create_directory
from my_system import recreate_directory
from renderer import Renderer
from script_bash import VISITOR_MAP
from script_briteonyx_bootstrap import BriteOnyxBootstrapScript
from script_briteonyx_declare import BriteOnyxDeclareScript
from script_briteonyx_environment import BriteOnyxEnvironmentScript
from script_gradle_activate import GradleActivateScript
from script_linux_activate import LinuxActivateScript
from script_project_activate import ProjectActivateScript
from script_project_environment import ProjectEnvironmentScript
from script_project_maybe_activate import ProjectMaybeActivateScript
from script_python_activate import PythonActivateScript
from script_user_environment import UserEnvironmentScript


LOG = getLogger('all_generate')


def _generate(script, target_directory, target_file):
    Renderer(VISITOR_MAP).render(script, os.path.join(target_directory, target_file))

def _activate_project(script, target_directory, target_file):
    script.generate()
    _generate(script, target_directory, target_file)

def _activate_gradle(script, target_directory, target_file):
    script.add_source_header()
    script.note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.rule()
    script.note('Uncomment the following two lines for debugging')
    script.comment('set -o verbose')
    script.comment('set -o xtrace')
    script.someday('Add inverse commands to isolate debugging')
    script.line()
    script.rule()
    script.comment('Verify pre-conditions')
    script.line()
    script.text('[[   -z "$BO_Home"          ]] &&')
    script.text(" echo 'FATAL: Missing $BO_Home'                &&")
    script.line(' return 63')
    script.text('[[ ! -d "$BO_Home"          ]] &&')
    script.text(''' echo "FATAL: Missing directory '$BO_Home'"    &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_Project"       ]] &&')
    script.text(" echo 'FATAL: Missing $BO_Project'             &&")
    script.line(' return 63')
    script.text('[[ ! -d "$BO_Project"       ]] &&')
    script.text(''' echo "FATAL: Missing directory '$BO_Project'" &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_GradleVersion" ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_GradleVersion'       &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_PathSystem"    ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_PathSystem'          &&''')
    script.line(' return 63')
    script.text('[[   -z "$JAVA_HOME"        ]] &&')
    script.text(''' echo 'FATAL: Missing $JAVA_HOME'              &&''')
    script.line(' return 63')
    script.line()
    script.line('Dir=$BO_Home/activation')
    script.text('[[ ! -d "${Dir}" ]] &&')
    script.text(''' echo "FATAL: Missing directory '${Dir}'" &&''')
    script.line(' return 63')
    script.line()
    script.rule()
    script.comment('Configure environment for Linux')
    script.line()
    script.line('Script=${Dir}/activate.src')
    script.text('[[ ! -f "${Script}" ]] &&')
    script.text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.line(' return 63')
    script.line()
    script.line('source ${Script}')
    script.line()
    script.line('Status=$?')
    script.text('[[ ${Status} -ne 0 ]] &&')
    script.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.line(' return ${Status}')
    script.line()
    script.rule()
    script.comment('Verify post-conditions')
    script.line()
    script.text('[[ -z "$BO_E_Config"  ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_E_Config'  &&''')
    script.line(' return 63')
    script.text('[[ -z "$BO_E_Ok"      ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_E_Ok'      &&''')
    script.line(' return "$BO_E_Config"')
    script.text('[[ -z "$BO_PathLinux" ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_PathLinux' &&''')
    script.line(' return "$BO_E_Config"')
    script.line()
    script.rule()
    script.comment('Configure environment for Gradle on Linux')
    script.line()
    script.line('export BO_PathGradle=$JAVA_HOME/bin')
    script.line()
    script.line('PATH=${BO_PathProject}')
    script.line('PATH=$PATH:${BO_PathGradle}')
    script.line('PATH=$PATH:${BO_PathLinux}')
    script.line('PATH=$PATH:${BO_PathSystem}')
    script.line('export PATH')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _activate_linux(script, target_directory, target_file):
    script.add_source_header()
    script.note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.rule()
    script.note('Uncomment the following two lines for debugging')
    script.comment('set -o verbose')
    script.comment('set -o xtrace')
    script.someday('Add inverse commands to isolate debugging')
    script.line()
    script.rule()
    script.comment('Verify pre-conditions')
    script.line()
    script.text('[[   -z "$BO_Home"       ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_Home'                &&''')
    script.line(' return 63')
    script.text('[[ ! -d "$BO_Home"       ]] &&')
    script.text(''' echo "FATAL: Missing directory '$BO_Home'"    &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_Project"    ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_Project'             &&''')
    script.line(' return 63')
    script.text('[[ ! -d "$BO_Project"    ]] &&')
    script.text(''' echo "FATAL: Missing directory '$BO_Project'" &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_PathSystem" ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_PathSystem'          &&''')
    script.line(' return 63')
    script.line()
    script.line('Dir="$BO_Home/helper/activation"')
    script.text('[[ ! -d "${Dir}" ]] &&')
    script.text(''' echo "FATAL: Missing directory '${Dir}'" &&''')
    script.line(' return 63')
    script.line()
    script.rule()
    script.comment('Configure Linux environment')
    script.line()
    script.line('Script="${Dir}/declare.src"')
    script.text('[[ ! -f "${Script}" ]] &&')
    script.text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.line(' return 63')
    script.line()
    script.line('source "${Script}"')
    script.line()
    script.line('Status=$?')
    script.text('[[ ${Status} -ne 0 ]] &&')
    script.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.line(' return ${Status}')
    script.line()
    script.rule()
    script.comment('Verify post-conditions')
    script.line()
    script.text('[[ -z "$BO_E_Config" ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_E_Config' &&''')
    script.line(' return 63')
    script.text('[[ -z "$BO_E_Ok"     ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_E_Ok'     &&''')
    script.line(' return "$BO_E_Config"')
    script.line()
    script.rule()
    script.comment('Configure PATH')
    script.line()
    script.line('export BO_PathLinux="$BO_Home/helper/invocation"')
    script.line('export BO_PathProject="$BO_Project/bin"')
    script.line()
    script.line('PATH="${BO_PathProject}"')
    script.line('PATH="$PATH:${BO_PathLinux}"')
    script.line('PATH="$PATH:${BO_PathSystem}"')
    script.line('export PATH')
    script.line()
    script.rule()
    script.comment('Configure TMPDIR')
    script.line()
    script.text('if [[ -z "$TMPDIR" ]];')
    script.line(' then')
    script.line("  echo 'WARN:  Missing $TMPDIR'")
    script.text('  [[ -z "$TMPDIR" ]] &&')
    script.text(' [[ -n "$HOME"     ]] &&')
    script.line(' export TMPDIR="$HOME/tmp"')
    script.text('  [[ -z "$TMPDIR" ]] &&')
    script.text(' [[ -d /tmp ]] &&')
    script.text(' [[ -n "$USER"     ]] &&')
    script.line(' export TMPDIR="/tmp/$USER"')
    script.text('  [[ -z "$TMPDIR" ]] &&')
    script.text(' [[ -d /tmp ]] &&')
    script.text(' [[ -n "$USERNAME" ]] &&')
    script.line(' export TMPDIR="/tmp/$USERNAME"')
    script.text('  [[ -z "$TMPDIR" ]] &&')
    script.text(''' echo 'FATAL: Missing $TMPDIR' &&''')
    script.line(' return 63')
    script.line('  # TODO: return "$BO_E_Config"')
    script.line('fi')
    script.line('export TMPDIR=$TMPDIR/$BO_ProjectName')
    script.line('''echo "INFO:  Remembering TMPDIR='$TMPDIR'"''')
    script.text('[[ ! -d "$TMPDIR" ]] &&')
    script.text(' mkdir -p "$TMPDIR" &&')
    script.line(''' echo "INFO:  Created '$TMPDIR'"''')
    script.text('[[ ! -d "$TMPDIR" ]] &&')
    script.text(''' echo "FATAL: Missing directory '$TMPDIR'" &&''')
    script.line(' return 63')
    script.comment('TODO: return "$BO_E_Config"')
    script.line()
    script.rule()
    script.comment('Define common aliases')
    script.line()
    script.line("alias ignored='hg status --ignored | grep -v work-in-progress | grep -v wip'")
    script.line("alias someday='grep -Einrw TODO . --include=*.bash --include=*.src --include=*.txt | sort | grep -v work-in-progress'")
    script.line("alias todo='grep -Einrw TODO . --include=*.bash --include=*.src --include=*.txt | sort | grep -v work-in-progress | grep -v SOMEDAY'")
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _activate_python(script, target_directory, target_file):
    script.add_source_header()
    script.note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.rule()
    script.note('Uncomment the following two lines for debugging')
    script.comment('set -o verbose')
    script.comment('set -o xtrace')
    script.someday('Add inverse commands to isolate debugging')
    script.line()
    script.rule()
    script.comment('Verify pre-conditions')
    script.line()
    script.text('[[   -z "$BO_Home"        ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_Home'                &&''')
    script.line(' return 63')
    script.text('[[ ! -d "$BO_Home"        ]] &&')
    script.text(''' echo "FATAL: Missing directory '$BO_Home'"    &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_Project"     ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_Project'             &&''')
    script.line(' return 63')
    script.text('[[ ! -d "$BO_Project"     ]] &&')
    script.text(''' echo "FATAL: Missing directory '$BO_Project'" &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_HomePackage" ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_HomePackage'         &&''')
    script.line(' return 63')
    script.text('[[   -z "$BO_PathSystem"  ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_PathSystem'          &&''')
    script.line(' return 63')
    script.line()
    script.line('Dir=$BO_Home/activation')
    script.text('[[ ! -d "${Dir}" ]] &&')
    script.text(''' echo "FATAL: Missing directory '${Dir}'" &&''')
    script.line(' return 63')
    script.line()
    script.rule()
    script.comment('Configure environment for Linux')
    script.line()
    script.line('Script=${Dir}/activate.src')
    script.text('[[ ! -f "${Script}" ]] &&')
    script.text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.line(' return 63')
    script.line()
    script.line('source ${Script}')
    script.line()
    script.line('Status=$?')
    script.text('[[ ${Status} -ne 0 ]] &&')
    script.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.line(' return ${Status}')
    script.line()
    script.rule()
    script.comment('Verify post-conditions')
    script.line()
    script.text('[[ -z "$BO_E_Config"  ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_E_Config'  &&''')
    script.line(' return 63')
    script.text('[[ -z "$BO_E_Ok"      ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_E_Ok'      &&''')
    script.line(' return "$BO_E_Config"')
    script.text('[[ -z "$BO_PathLinux" ]] &&')
    script.text(''' echo 'FATAL: Missing $BO_PathLinux' &&''')
    script.line(' return "$BO_E_Config"')
    script.line()
    script.rule()
    script.comment('Configure environment for Python on Linux')
    script.line()
    script.line('DirPVE=$BO_Project/PVE')
    script.line('export BO_PathProject=$BO_PathProject:${DirPVE}/bin')
    script.line('export BO_PathPython=$BO_Home/invocation/Python')
    script.line()
    script.line('PATH=${BO_PathProject}')
    script.line('PATH=$PATH:${BO_PathPython}')
    script.line('PATH=$PATH:${BO_PathLinux}')
    script.line('PATH=$PATH:${BO_PathSystem}')
    script.line('export PATH')
    script.line()
    script.rule()
    script.comment('Configure PIP_DOWNLOAD_CACHE')
    script.line()
    script.text('if [[ -z "$PIP_DOWNLOAD_CACHE" ]];')
    script.line(' then')
    script.line("  echo 'WARN: Missing $PIP_DOWNLOAD_CACHE'")
    script.text('  [[ -z "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.text(' [[ -n "$TMPDIR" ]] &&')
    script.line(' export PIP_DOWNLOAD_CACHE="$TMPDIR/pip"')
    script.text('  [[ -z "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.text(''' echo 'FATAL: Missing $PIP_DOWNLOAD_CACHE' &&''')
    script.line(' return 63')
    script.line('''  echo "INFO: Remembering PIP_DOWNLOAD_CACHE='$PIP_DOWNLOAD_CACHE'"''')
    script.line('fi')
    script.text('[[ ! -d "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.line(' mkdir -p "$PIP_DOWNLOAD_CACHE"')
    script.text('[[ ! -d "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.text(''' echo "FATAL: Missing directory '$PIP_DOWNLOAD_CACHE'" &&''')
    script.line(' return 63')
    script.line()
    script.rule()
    script.comment('Configure Python virtual environment (PVE)')
    script.line()
    script.line('export PIP_REQUIRE_VIRTUALENV=true')
    script.line('export PIP_RESPECT_VIRTUALENV=true')
    script.line()
    script.line('Script=${DirPVE}/bin/activate')
    script.text('if [[ ! -f "${Script}" ]];')
    script.line(' then')
    script.line('  # If the virtual environment does not already exist, create it')
    script.line('  # TODO: This code assumes that the Python virtual environment package is')
    script.line('  # already installed, but it may not be.  Eventually we should handle that,')
    script.line('  # either with a more-specific message or by actually installing it.')
    script.line('''  echo "WARN: Creating Python virtual environment (PVE) in '${DirPVE}'"''')
    script.line('''  echo "WARN: This requires the 'python-virtualenv' package to have been installed"''')
    script.line('  virtualenv "${DirPVE}"')
    script.line('  Status=$?')
    script.text('  [[ ${Status} -ne 0 ]] &&')
    script.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.line(' return ${Status}')
    script.line('fi')
    script.line()
    script.text('[[ ! -d "${DirPVE}" ]] &&')
    script.text(''' echo "FATAL: Missing directory '${DirPVE}'" &&''')
    script.line(' return 63')
    script.text('[[ ! -f "${Script}" ]] &&')
    script.text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.line(' return 63')
    script.line()
    script.line('source ${Script}')
    script.line()
    script.line('Status=$?')
    script.text('[[ ${Status} -ne 0 ]] &&')
    script.text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.line(' return ${Status}')
    script.line()
    script.text('[[ -z "$VIRTUAL_ENV" ]] &&')
    script.text(''' echo 'FATAL: Missing $VIRTUAL_ENV' &&''')
    script.line(' return 63')
    script.line('export PYTHONHOME=$VIRTUAL_ENV')
    script.text('[[ -z "$PYTHONHOME"  ]] &&')
    script.text(''' echo 'FATAL: Missing $PYTHONHOME'  &&''')
    script.line(' return 63')
    script.line()
    script.line('''echo "INFO: Activated Python virtual environment (PVE) in '${DirPVE}'"''')
    script.line('''echo "INFO: Found '$(python --version 2>&1)' at '$(which python)'"''')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _bootstrap_briteonyx(script, target_directory, target_file):
    script.add_source_header()
    script.note("By convention, BriteOnyx is configured via environment variables prefixed by 'BO_'.")
    script.line()
    script.text('''boVariableRequire 'BO_Project' ||''')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.rule()
    script.comment('Copy starter files into place as necessary')
    script.line()
    script.line('DirSrc=$BO_Project/BriteOnyx/starter')
    script.line('DirTgt=$BO_Project')
    script.line()
    script.text('[[ ! -f $DirTgt/.hgignore ]] &&')
    script.line(' cp $DirSrc/project.hgignore $DirTgt/sample.hgignore')
    script.line()
    script.line('FileTgt=$DirTgt/declare.src')
    script.text('[[ ! -f $FileTgt ]] &&')
    script.line(' cp $DirSrc/project-declare.src $FileTgt')
    script.line()
    script.line('FileTgt=$DirTgt/development.rst')
    script.text('[[ ! -f $FileTgt ]] &&')
    script.line(' cp $DirSrc/project-development.rst $FileTgt')
    script.line()
    script.line('FileTgt=$DirTgt/env.src')
    script.text('[[ ! -f $FileTgt ]] &&')
    script.line(' cp $DirSrc/project-env.src $FileTgt')
    script.line()
    script.line('FileTgt=$DirTgt/README.rst')
    script.text('[[ ! -f $FileTgt ]] &&')
    script.line(' cp $DirSrc/project-README.rst $FileTgt')
    script.line()
    script.line('DirTgt=$BO_Project/bin')
    script.line('FileTgt=$DirTgt/all-fix-permissions.bash')
    script.text('[[ ! -f $FileTgt ]] &&')
    script.line(' cp $DirSrc/project-all-fix-permissions.bash $FileTgt')
    script.line()
    script.line('DirTgt=$BO_Project/bin/helper/Linux')
    script.text('[[ ! -e $DirTgt ]] &&')
    script.line(' mkdir -p $DirTgt')
    script.line('FileTgt=$DirTgt/declare-BASH.src')
    script.text('[[ ! -f $FileTgt ]] &&')
    script.line(' cp $DirSrc/project-declare-BASH.src $FileTgt')
    script.line()
    script.line('DirTgt=$HOME')
    script.line('FileTgt=$DirTgt/.BriteOnyx.src')
    script.comment('Move previous scripts to new path')
    script.text('[[   -f $DirTgt/BriteOnyx-env.bash ]] &&')
    script.line(' mv $DirTgt/BriteOnyx-env.bash $FileTgt')
    script.text('[[   -f $DirTgt/BriteOnyx-env.src  ]] &&')
    script.line(' mv $DirTgt/BriteOnyx-env.src  $FileTgt')
    script.text('[[ ! -f $FileTgt ]] &&')
    script.line(' cp $DirSrc/user-BriteOnyx.src $FileTgt')
    script.line()
    script.rule()
    script.comment('Configure for this user')
    script.line()
    script.line('Script=$HOME/.BriteOnyx.src')
    script.text('boScriptRequire "$Script" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.text('source          "$Script" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.rule()
    script.comment('Configure for this project')
    script.line()
    script.line('Script=$BO_Project/env.src')
    script.text('boScriptRequire $Script ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.text('source          $Script ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.rule()
    script.comment('Configure for BriteOnyx')
    script.line()
    script.line('Script="$BO_Project/BriteOnyx/env.src"')
    script.text('boScriptRequire "$Script" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.text('source          "$Script" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.rule()
    script.comment('Verify BriteOnyx bootstrap configuration')
    script.line()
    script.text('''boVariableRequire 'BO_Parent'  ||''')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.text('''boVariableRequire 'BO_Url'     ||''')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.text('''boVariableRequire 'BO_Version' ||''')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.rule()
    script.line(": <<'DisabledContent'")
    script.comment('Checkout the BriteOnyx source')
    script.line()
    script.text('boDirectoryCreate "$BO_Parent" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.text('[[ -z "$BO_Home" ]] &&')
    script.line(''' export BO_Home=$(boNodeCanonical "$BO_Parent/$BO_Version")''')
    script.text('''boVariableRequire 'BO_Home' ||''')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.text('if boDirectoryExists "$BO_Home" ;')
    script.line(' then')
    script.line('''  boLogDebug "Directory '$BO_Home' already exists, skipping Mercurial clone."''')
    script.text('elif [[ "$BO_Version" == "predeployed" ]];')
    script.line(' then')
    script.line('''  boLogWarn "Ignoring Mercurial clone of version '$BO_Version'"''')
    script.line('else')
    script.line('''  boLogInfo "Cloning version '$BO_Version' from '$BO_Url' into '$BO_Home'..."''')
    script.line('  Cmd="hg clone"')
    script.line('  Cmd+=" --rev $BO_Version"')
    script.line('  Cmd+=" $BO_Url"')
    script.line('  Cmd+=" $BO_Home"')
    script.line('''  Msg="Mercurial failed to clone into directory '$BO_Home'!"''')
    script.text('  boExecute "$Cmd" "$Msg" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line('fi')
    script.line()
    script.text('boDirectoryRequire "$BO_Home" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.text('if [[ "$BO_Version" == "tip" ]];')
    script.line(' then')
    script.line("  # Update Mercurial clone of 'tip' to support development of BriteOnyx framework")
    script.line('''  boLogInfo "Updating clone of version '$BO_Version' from '$BO_Url' into '$BO_Home'..."''')
    script.text('  cd "$BO_Home" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line('  Cmd="hg pull --update"')
    script.line('''  Msg="Mercurial failed to update clone in directory '$BO_Home'!"''')
    script.text('  boExecute "$Cmd" "$Msg" ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line('else')
    script.line('''  boLogDebug "BriteOnyx version '$BO_Version' should be stable, skipping update of clone."''')
    script.line('fi')
    script.line('DisabledContent')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _declare_for_briteonyx(script, target_directory, target_file):
    script.add_source_header()
    script.note('Assumes this project has been activated using the BriteOnyx framework.')
    script.note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.rule()
    script.note('Uncomment the following two lines for debugging')
    script.comment('set -o verbose')
    script.comment('set -o xtrace')
    script.someday('Add inverse commands to isolate debugging')
    script.line()
    script.rule()
    script.comment('Declare needed functionality to support the BriteOnyx framework')
    script.note("We use the 'bo' prefix by convention for all our BriteOnyx support functions.")
    script.line()
    script.rule()
    script.comment('Functions in this section should NOT call functions from following sections')
    script.line()
    script.line('boLog () {')
    script.line('  # Log the message $1 to STDERR')
    script.line('  # NOTE:  Should only be called from this script')
    script.line('  # $1 = message')
    script.line('  echo -e "$1" >&2')
    script.line('} && export -f boLog')
    script.line()
    script.line('boNodeCanonical () {')
    script.line('  # Return the canonical pathname for file system node $1')
    script.line('  # NOTE: Must be called via command substitution, e.g.:')
    script.line('''  #   "$(boNodeCanonical '$1')"''')
    script.line('  [[ $# -eq 1 ]] || return 100')
    script.line('  # $1 = pathname of file system node')
    script.line('  declare Result')
    script.line('  # NOTE: This call to "readlink" is not supported on Apple Mac OS X, so deal with it...')
    script.line('  Result="$(readlink -m $1)"')
    script.line('  [[ $? -eq 0   ]] && echo "$Result" && return 0')
    script.line('  [[ "$1" = "." ]] && echo "$PWD"       && return 0')
    script.line('  echo "$1"')
    script.line('} && export -f boNodeCanonical')
    script.line()
    script.line('boTrace () {')
    script.line('  # Trace message $1')
    script.line('  # $1 = message')
    script.line('  [[ -n "$BO_Trace" ]] && boLog "TRACE: $1"')
    script.line('} && export -f boTrace')
    script.line()
    script.line('boTraceEntry () {')
    script.line('  # Trace the entry of execution into caller with source location name $1 and line $2 called with')
    script.line('  #   argument count $3 and arguments $4')
    script.line('  [[ $# -eq 4 ]] || return 100')
    script.line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.line('  # $2 = caller source location line ($LINENO)')
    script.line('  # $3 = caller argument count ($#)')
    script.line('  # $4 = caller arguments ($*)')
    script.line('''  boTrace "'$1:$2' called with $3 args: '$4'"''')
    script.line('} && export -f boTraceEntry')
    script.line()
    script.line('boTraceValue () {')
    script.line('  # Trace value $2 described as $1')
    script.line('  [[ $# -eq 2 ]] || return 100')
    script.line('  # $1 = description of value')
    script.line('  # $2 = value')
    script.line('''  boTrace "$1 = '$2'"''')
    script.line('} && export -f boTraceValue')
    script.line()
    script.line('boTraceVariable () {')
    script.line('  # Trace environment variable $1')
    script.line('  [[ $# -eq 1 ]] || return 100')
    script.line('  # $1 = name of environment variable')
    script.line('  declare -r Name="$1"')
    script.line('  declare -r Value="${!Name}"')
    script.line('''  boTraceValue "Variable '$Name'" "$Value"''')
    script.line('} && export -f boTraceVariable')
    script.line()
    script.rule()
    script.comment('Functions in this section should NOT call functions from following sections')
    script.line()
    script.line('boDirectoryExists () {')
    script.line('  boNodeIsDirectory "$1"')
    script.line('} && export -f boDirectoryExists')
    script.line()
    script.line('boFileExists () {')
    script.line('  boNodeIsFile "$1"')
    script.line('} && export -f boFileExists')
    script.line()
    script.line('boNodeExists () {')
    script.line('  # Return whether node $1 exists')
    script.line('  [[ $# -eq 1 ]] || return 100')
    script.line('  # $1 = node pathname')
    script.line('  [[ -e "$1" ]]')
    script.line('} && export -f boNodeExists')
    script.line()
    script.line('boNodeIsDirectory () {')
    script.line('  # Return whether node $1 is a directory')
    script.line('  [[ $# -eq 1 ]] || return 100')
    script.line('  # $1 = node pathname')
    script.line('  [[ -d "$1" ]]')
    script.line('} && export -f boNodeIsDirectory')
    script.line()
    script.line('boNodeIsFile () {')
    script.line('  # Return whether node $1 is a file')
    script.line('  [[ $# -eq 1 ]] || return 100')
    script.line('  # $1 = node pathname')
    script.line('  [[ -f "$1" ]]')
    script.line('} && export -f boNodeIsFile')
    script.line()
    script.line('boVariableIsMissing () {')
    script.line('  # Return whether environment variable $1 is missing (undefined or empty)')
    script.line('  [[ $# -eq 1 ]] || return 100')
    script.line('  # $1 = name of environment variable')
    script.line('  declare -r Name="$1"')
    script.line('  declare -r Value="${!Name}"')
    script.line('  [[ -z "$Value" ]]')
    script.line('} && export -f boVariableIsMissing')
    script.line()
    script.rule()
    script.comment('Functions in this section should NOT call functions from following sections')
    script.line()
    script.line('boLogDebug () {')
    script.line('  boLog "DEBUG: $1"')
    script.line('} && export -f boLogDebug')
    script.line()
    script.line('boLogError () {')
    script.line('  boLog "ERROR: $1"')
    script.line('} && export -f boLogError')
    script.line()
    script.line('boLogFatal () {')
    script.line('  boLog "FATAL: $1"')
    script.line('} && export -f boLogFatal')
    script.line()
    script.line('boLogInfo () {')
    script.line('  boLog "INFO:  $1"')
    script.line('} && export -f boLogInfo')
    script.line()
    script.line('boLogWarn () {')
    script.line('  boLog "WARN:  $1"')
    script.line('} && export -f boLogWarn')
    script.line()
    script.rule()
    script.comment('Functions in this section should NOT call functions from following sections')
    script.line()
    script.line('boAbort () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('''  # Abort execution due to previous command's status $3 while reporting fatal log message $5''')
    script.line('  #   (including source location name $1 and line $2) and propagating outgoing status code $4')
    script.line('  # TODO: Rename to boFail?')
    script.line('  [[ $# -eq 5 ]] || return 100')
    script.line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.line('  # $2 = caller source location line ($LINENO)')
    script.line('  # $3 = incoming status code from previous command ($?, non-zero)')
    script.line('  # $4 = outgoing status code (repeat $? unless overriding)')
    script.line('  # $5 = message')
    script.line('  [[ "$3" -eq 0 ]] && return 100')
    script.line('''  boLogFatal "ABORT: Status $3 at '$1:$2' -> status $4: $5"''')
    script.line('  return "$4"')
    script.line('} && export -f boAbort')
    script.line()
    script.line('boFailed () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('''  # Log failed execution due to previous command's status $3 as reported at source location name''')
    script.line('  #   $1 and line $2, then propagate the failed status')
    script.line('  [[ $# -eq 3 ]] || return 100')
    script.line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.line('  # $2 = caller source location line ($LINENO)')
    script.line('  # $3 = incoming status code from previous command ($?, non-zero)')
    script.line('  [[ "$3" -eq 0 ]] && return 100')
    script.line('''  boLogFatal "FAILED: Status $3 at '$1:$2'"''')
    script.line('  return "$3"')
    script.line('} && export -f boFailed')
    script.line()
    script.rule()
    script.comment('Functions in this section should NOT call functions from following sections')
    script.line()
    script.line('boArgsRequire () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('  # Require that the actual argument count $3 equal the expected argument count $4 in the caller')
    script.line('  #   with source location name $1 and line $2')
    script.line('  [[ $# -eq 4 ]] || return 100')
    script.line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.line('  # $2 = caller source location line ($LINENO)')
    script.line('  # $3 = actual argument count ($#)')
    script.line('  # $4 = expected argument count')
    script.line('  declare -r Msg="Expected $4 arguments but got $3!"')
    script.line('  [[ $3 -eq $4 ]] || boAbort "$1" "$2" $? 100 "$Msg" || return $?')
    script.line('} && export -f boArgsRequire')
    script.line()
    script.rule()
    script.comment('Functions in this section should NOT call functions from following sections')
    script.line()
    script.line('boDirectoryCreate () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('  # Create directory $1, if it does not already exist')
    script.line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.line('  # $1 = directory pathname')
    script.line('''  declare Msg="Directory '$1' already exists, skipping creation."''')
    script.line('  boNodeIsDirectory "$1" && boLogDebug "$Msg"                            && return $?')
    script.line('''  Msg="Unable to create directory '$1', failed!"''')
    script.line('  mkdir -p "$1"           || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.line('  boDirectoryRequire "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.line('} && export -f boDirectoryCreate')
    script.line()
    script.line('boDirectoryRequire () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('  # Require directory $1, abort if it is missing')
    script.line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.line('  # $1 = pathname of required directory')
    script.line('  boNodeIsDirectory "$1" && return $?')
    script.line('''  Msg="Directory '$1' is required but is missing!"''')
    script.line('  boNodeExists "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.line('''  Msg="Directory '$1' is required but is blocked by a non-directory!"''')
    script.line('  boAbort "$FUNCNAME" "$LINENO" 100 100 "$Msg" || return $?')
    script.line('} && export -f boDirectoryRequire')
    script.line()
    script.line('boFileRequire () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('  # Require that file $1 exists, abort if it is missing')
    script.line('  # TODO: Should we check other characteristics like readability or executability?')
    script.line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.line('  # $1 = required script file pathname')
    script.line('''  declare -r Msg="File '$1' is required but missing!"''')
    script.line('  boNodeIsFile "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.line('} && export -f boFileRequire')
    script.line()
    script.line('boScriptRequire () {')
    script.line('  # Require that script file $1 exists, abort if it is missing')
    script.line('  # TODO: Should we check other characteristics like readability or executability?')
    script.line('  boFileRequire "$1" || boFailed "$FUNCNAME" "$LINENO" $? || return $?')
    script.line('} && export -f boScriptRequire')
    script.line()
    script.line('boVariableRequire () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('  # Require environment variable $1, abort if it is missing')
    script.line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.line('  # $1 = name of required environment variable')
    script.line('''  declare -r Msg="Variable '$1' is required but is undefined or empty!"''')
    script.line('  ! boVariableIsMissing "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.line('} && export -f boVariableRequire')
    script.line()
    script.rule()
    script.comment('Functions in this section should NOT call functions from following sections')
    script.line()
    script.line('boExecute () {')
    script.line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.line('  # Execute command $1; if it fails, abort with message $2')
    script.line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 2 || return $?')
    script.line('  # $1 = command to execute')
    script.line('  # $2 = message for abort upon failure')
    script.line('  boLogDebug "Executing command: $1"')
    script.line('  $1 || boAbort "$FUNCNAME" "$LINENO" $? $? "$2" || return $?')
    script.line('} && export -f boExecute')
    script.line()
    script.rule()
    script.comment("Successfully 'return', but do NOT 'exit'")
    script.line('return 0')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _configure_environment_for_briteonyx(script, target_directory, target_file):
    script.add_source_header()
    script.comment('Configure BriteOnyx deployment')
    script.someday('Keep BO_Version updated to latest published revision')
    script.line()
    script.text('[[ -z "$BO_Parent"  ]] &&')
    script.line(' export BO_Parent=$HOME/.BO')
    script.text('[[ -z "$BO_Version" ]] &&')
    script.line(' export BO_Version=rev36')
    script.text('[[ -z "$BO_Home"    ]] &&')
    script.line(' export BO_Home=$BO_Parent/$BO_Version')
    script.line()
    script.line("alias functions='declare -F | sort'")
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _configure_environment_for_project(script, target_directory, target_file):
    script.add_source_header()
    script.comment('Configure this project')
    script.line()
    script.comment('TODO: Implement')
    script.line('export BO_ProjectName=TODO')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _configure_environment_for_user(script, target_directory, target_file):
    script.add_source_header()
    script.note('Declare needed environment variables here')
    script.line()
    script.comment('TODO: Implement as needed, but defer to $BO_Project/BriteOnyx/env.src for now')
    script.line()
    script.rule()
    script.line(": <<'DisabledContent'")
    script.note('Copy this content above, to override system portion of final PATH')
    script.line('export BO_PathSystem=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin')
    script.line('DisabledContent''')
    _generate(script, target_directory, target_file)

def _maybe_activate_project(script, target_directory, target_file):
    script.add_source_header()
    script.note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.rule()
    script.note('Uncomment the following two lines for debugging')
    script.comment('set -o verbose')
    script.comment('set -o xtrace')
    script.someday('Add inverse commands to isolate debugging')
    script.line()
    script.rule()
    script.comment('Skip if BriteOnyx is already activated')
    script.line()
    script.line("Msg='$BO_Home is defined, assuming BriteOnyx already activated'")
    script.text('[[ -n "$BO_Home" ]] &&')
    script.text(' logDebug "$Msg" &&')
    script.line(' return 0')
    script.line()
    script.rule()
    script.comment('Activate BriteOnyx')
    script.line()
    script.line('Script="$(dirname "$0")/../activate.src"')
    script.text('[[ ! -f "$Script" ]] &&')
    script.text(''' echo "FATAL: Missing script '$Script'" &&''')
    script.line(' return 63')
    script.text('source "$Script";')
    script.line(' Status=$?')
    script.line('''Msg="FATAL: Status $Status at '$0:$LINENO'"''')
    script.text('[[ $Status -ne 0 ]] &&')
    script.text(' echo "$Msg" &&')
    script.line(' return $Status')
    script.line()
    script.rule()
    script.comment('Verify post-conditions')
    script.line()
    script.text('boVariableRequire   BO_Home ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.text('boDirectoryRequire $BO_Home ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.text('boVariableRequire   BO_Project ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.text('boDirectoryRequire $BO_Project ||')
    script.text(' boFailed "$0" "$LINENO" $? ||')
    script.line(' return $?')
    script.line()
    script.rule()
    script.comment("Successfully 'return', but do NOT 'exit'")
    script.line('return 0')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def main():
    try:
        configure_logging()
        LOG.debug("main() try = began")

        parser = argparse.ArgumentParser()
        parser.add_argument('source_directory', help='from which to generate output')
        parser.add_argument('target_directory', help='into which to generate output')
        args = parser.parse_args()

        LOG.info("Generating scripts from directory '{0}' into directory '{1}'".format(
            args.source_directory, args.target_directory
        ))
        recreate_directory(args.target_directory)

        directory = os.path.join(args.target_directory, 'helper', 'activation')
        maybe_create_directory(directory)
        _activate_linux(LinuxActivateScript(), directory, 'activate.src')

        directory = os.path.join(args.target_directory, 'helper', 'activation', 'add_on')
        maybe_create_directory(directory)
        _activate_gradle(GradleActivateScript(), directory, 'activate-Gradle.src')
        _activate_python(PythonActivateScript(), directory, 'activate-Python.src')

        directory = os.path.join(args.target_directory, 'sample_project')
        maybe_create_directory(directory)
        _activate_project(ProjectActivateScript(), directory, 'activate.src')

        directory = os.path.join(args.target_directory, 'sample_project', 'BriteOnyx')
        maybe_create_directory(directory)
        _bootstrap_briteonyx(BriteOnyxBootstrapScript(), directory, 'bootstrap.src')
        _declare_for_briteonyx(BriteOnyxDeclareScript(), directory, 'declare.src')
        _configure_environment_for_briteonyx(BriteOnyxEnvironmentScript(), directory, 'env.src')
        _maybe_activate_project(ProjectMaybeActivateScript(), directory, 'maybeActivate.src')

        directory = os.path.join(args.target_directory, 'sample_project', 'BriteOnyx', 'starter')
        maybe_create_directory(directory)
        _configure_environment_for_project(ProjectEnvironmentScript(), directory, 'project-env.src')
        _configure_environment_for_user(UserEnvironmentScript(), directory, 'user-BriteOnyx.src')
    except Exception as e:
        LOG.error("main() except Exception = failure")
        LOG.exception(e)
        sys.exit(1)
    else:
        LOG.debug("main() else = success")
        sys.exit(0)
    finally:
        LOG.debug("main() finally = ended")


if __name__ == '__main__':
    main()


""" Disabled content
"""

