#!/usr/bin/env python

import argparse
import os
import sys

from logging import getLogger
from my_logging import configure_logging
from my_system import maybe_create_directory
from my_system import recreate_directory
from renderer import Renderer
from script_bash import VISITOR_MAP
from script_briteonyx_bootstrap import BriteOnyxBootstrapScript
from script_briteonyx_declare import BriteOnyxDeclareScript
from script_briteonyx_environment import BriteOnyxEnvironmentScript
from script_gradle_activate import GradleActivateScript
from script_linux_activate import LinuxActivateScript
from script_project_activate import ProjectActivateScript
from script_project_environment import ProjectEnvironmentScript
from script_project_maybe_activate import ProjectMaybeActivateScript
from script_python_activate import PythonActivateScript
from script_user_environment import UserEnvironmentScript


LOG = getLogger('all_generate')


def _generate(script, target_directory, target_file):
    Renderer(VISITOR_MAP).render(script, os.path.join(target_directory, target_file))

def _generate_project_activate(script, target_directory, target_file):
    script.add_source_header()
    script.add_activation_comments()
    script.abort_if_activated()
    script.create_random_tmpdir()
    script.initialize_logging_file()
    script.capture_incoming_environment()
    script.remember_project_root()
    script.declare_for_bootstrap()
    script.normalize_reference_to_project_root()
    script.copy_starter_files()
    script.configure_for_user()
    script.configure_for_project()
    script.configure_for_briteonyx()
    script.verify_bootstrap()
    script.remember_path()
    script.activate_for_linux()
    script.set_tmpdir()
    script.declare_for_project()
    script.demonstrate_logging()
    script.shutdown()
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_gradle_activate(script, target_directory, target_file):
    script.add_source_header()
    script.add_note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.add_rule()
    script.add_note('Uncomment the following two lines for debugging')
    script.add_comment('set -o verbose')
    script.add_comment('set -o xtrace')
    script.add_someday('Add inverse commands to isolate debugging')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify pre-conditions')
    script.add_blank_line()
    script.add_text('[[   -z "$BO_Home"          ]] &&')
    script.add_text(" echo 'FATAL: Missing $BO_Home'                &&")
    script.add_line(' return 63')
    script.add_text('[[ ! -d "$BO_Home"          ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$BO_Home'"    &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_Project"       ]] &&')
    script.add_text(" echo 'FATAL: Missing $BO_Project'             &&")
    script.add_line(' return 63')
    script.add_text('[[ ! -d "$BO_Project"       ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$BO_Project'" &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_GradleVersion" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_GradleVersion'       &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_PathSystem"    ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_PathSystem'          &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$JAVA_HOME"        ]] &&')
    script.add_text(''' echo 'FATAL: Missing $JAVA_HOME'              &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('Dir=$BO_Home/activation')
    script.add_text('[[ ! -d "${Dir}" ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '${Dir}'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure environment for Linux')
    script.add_blank_line()
    script.add_line('Script=${Dir}/activate.src')
    script.add_text('[[ ! -f "${Script}" ]] &&')
    script.add_text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('source ${Script}')
    script.add_blank_line()
    script.add_line('Status=$?')
    script.add_text('[[ ${Status} -ne 0 ]] &&')
    script.add_text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.add_line(' return ${Status}')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify post-conditions')
    script.add_blank_line()
    script.add_text('[[ -z "$BO_E_Config"  ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_E_Config'  &&''')
    script.add_line(' return 63')
    script.add_text('[[ -z "$BO_E_Ok"      ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_E_Ok'      &&''')
    script.add_line(' return "$BO_E_Config"')
    script.add_text('[[ -z "$BO_PathLinux" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_PathLinux' &&''')
    script.add_line(' return "$BO_E_Config"')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure environment for Gradle on Linux')
    script.add_blank_line()
    script.add_line('export BO_PathGradle=$JAVA_HOME/bin')
    script.add_blank_line()
    script.add_line('PATH=${BO_PathProject}')
    script.add_line('PATH=$PATH:${BO_PathGradle}')
    script.add_line('PATH=$PATH:${BO_PathLinux}')
    script.add_line('PATH=$PATH:${BO_PathSystem}')
    script.add_line('export PATH')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_linux_activate(script, target_directory, target_file):
    script.add_source_header()
    script.add_note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.add_rule()
    script.add_note('Uncomment the following two lines for debugging')
    script.add_comment('set -o verbose')
    script.add_comment('set -o xtrace')
    script.add_someday('Add inverse commands to isolate debugging')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify pre-conditions')
    script.add_blank_line()
    script.add_text('[[   -z "$BO_Home"       ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_Home'                &&''')
    script.add_line(' return 63')
    script.add_text('[[ ! -d "$BO_Home"       ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$BO_Home'"    &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_Project"    ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_Project'             &&''')
    script.add_line(' return 63')
    script.add_text('[[ ! -d "$BO_Project"    ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$BO_Project'" &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_PathSystem" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_PathSystem'          &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('Dir="$BO_Home/helper/activation"')
    script.add_text('[[ ! -d "${Dir}" ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '${Dir}'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure Linux environment')
    script.add_blank_line()
    script.add_line('Script="${Dir}/declare.src"')
    script.add_text('[[ ! -f "${Script}" ]] &&')
    script.add_text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('source "${Script}"')
    script.add_blank_line()
    script.add_line('Status=$?')
    script.add_text('[[ ${Status} -ne 0 ]] &&')
    script.add_text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.add_line(' return ${Status}')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify post-conditions')
    script.add_blank_line()
    script.add_text('[[ -z "$BO_E_Config" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_E_Config' &&''')
    script.add_line(' return 63')
    script.add_text('[[ -z "$BO_E_Ok"     ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_E_Ok'     &&''')
    script.add_line(' return "$BO_E_Config"')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure PATH')
    script.add_blank_line()
    script.add_line('export BO_PathLinux="$BO_Home/helper/invocation"')
    script.add_line('export BO_PathProject="$BO_Project/bin"')
    script.add_blank_line()
    script.add_line('PATH="${BO_PathProject}"')
    script.add_line('PATH="$PATH:${BO_PathLinux}"')
    script.add_line('PATH="$PATH:${BO_PathSystem}"')
    script.add_line('export PATH')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure TMPDIR')
    script.add_blank_line()
    script.add_text('if [[ -z "$TMPDIR" ]];')
    script.add_line(' then')
    script.add_line("  echo 'WARN:  Missing $TMPDIR'")
    script.add_text('  [[ -z "$TMPDIR" ]] &&')
    script.add_text(' [[ -n "$HOME"     ]] &&')
    script.add_line(' export TMPDIR="$HOME/tmp"')
    script.add_text('  [[ -z "$TMPDIR" ]] &&')
    script.add_text(' [[ -d /tmp ]] &&')
    script.add_text(' [[ -n "$USER"     ]] &&')
    script.add_line(' export TMPDIR="/tmp/$USER"')
    script.add_text('  [[ -z "$TMPDIR" ]] &&')
    script.add_text(' [[ -d /tmp ]] &&')
    script.add_text(' [[ -n "$USERNAME" ]] &&')
    script.add_line(' export TMPDIR="/tmp/$USERNAME"')
    script.add_text('  [[ -z "$TMPDIR" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $TMPDIR' &&''')
    script.add_line(' return 63')
    script.add_line('  # TODO: return "$BO_E_Config"')
    script.add_line('fi')
    script.add_line('export TMPDIR=$TMPDIR/$BO_ProjectName')
    script.add_line('''echo "INFO:  Remembering TMPDIR='$TMPDIR'"''')
    script.add_text('[[ ! -d "$TMPDIR" ]] &&')
    script.add_text(' mkdir -p "$TMPDIR" &&')
    script.add_line(''' echo "INFO:  Created '$TMPDIR'"''')
    script.add_text('[[ ! -d "$TMPDIR" ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$TMPDIR'" &&''')
    script.add_line(' return 63')
    script.add_comment('TODO: return "$BO_E_Config"')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Define common aliases')
    script.add_blank_line()
    script.add_line("alias ignored='hg status --ignored | grep -v work-in-progress | grep -v wip'")
    script.add_line("alias someday='grep -Einrw TODO . --include=*.bash --include=*.src --include=*.txt | sort | grep -v work-in-progress'")
    script.add_line("alias todo='grep -Einrw TODO . --include=*.bash --include=*.src --include=*.txt | sort | grep -v work-in-progress | grep -v SOMEDAY'")
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_python_activate(script, target_directory, target_file):
    script.add_source_header()
    script.add_note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.add_rule()
    script.add_note('Uncomment the following two lines for debugging')
    script.add_comment('set -o verbose')
    script.add_comment('set -o xtrace')
    script.add_someday('Add inverse commands to isolate debugging')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify pre-conditions')
    script.add_blank_line()
    script.add_text('[[   -z "$BO_Home"        ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_Home'                &&''')
    script.add_line(' return 63')
    script.add_text('[[ ! -d "$BO_Home"        ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$BO_Home'"    &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_Project"     ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_Project'             &&''')
    script.add_line(' return 63')
    script.add_text('[[ ! -d "$BO_Project"     ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$BO_Project'" &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_HomePackage" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_HomePackage'         &&''')
    script.add_line(' return 63')
    script.add_text('[[   -z "$BO_PathSystem"  ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_PathSystem'          &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('Dir=$BO_Home/activation')
    script.add_text('[[ ! -d "${Dir}" ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '${Dir}'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure environment for Linux')
    script.add_blank_line()
    script.add_line('Script=${Dir}/activate.src')
    script.add_text('[[ ! -f "${Script}" ]] &&')
    script.add_text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('source ${Script}')
    script.add_blank_line()
    script.add_line('Status=$?')
    script.add_text('[[ ${Status} -ne 0 ]] &&')
    script.add_text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.add_line(' return ${Status}')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify post-conditions')
    script.add_blank_line()
    script.add_text('[[ -z "$BO_E_Config"  ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_E_Config'  &&''')
    script.add_line(' return 63')
    script.add_text('[[ -z "$BO_E_Ok"      ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_E_Ok'      &&''')
    script.add_line(' return "$BO_E_Config"')
    script.add_text('[[ -z "$BO_PathLinux" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $BO_PathLinux' &&''')
    script.add_line(' return "$BO_E_Config"')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure environment for Python on Linux')
    script.add_blank_line()
    script.add_line('DirPVE=$BO_Project/PVE')
    script.add_line('export BO_PathProject=$BO_PathProject:${DirPVE}/bin')
    script.add_line('export BO_PathPython=$BO_Home/invocation/Python')
    script.add_blank_line()
    script.add_line('PATH=${BO_PathProject}')
    script.add_line('PATH=$PATH:${BO_PathPython}')
    script.add_line('PATH=$PATH:${BO_PathLinux}')
    script.add_line('PATH=$PATH:${BO_PathSystem}')
    script.add_line('export PATH')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure PIP_DOWNLOAD_CACHE')
    script.add_blank_line()
    script.add_text('if [[ -z "$PIP_DOWNLOAD_CACHE" ]];')
    script.add_line(' then')
    script.add_line("  echo 'WARN: Missing $PIP_DOWNLOAD_CACHE'")
    script.add_text('  [[ -z "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.add_text(' [[ -n "$TMPDIR" ]] &&')
    script.add_line(' export PIP_DOWNLOAD_CACHE="$TMPDIR/pip"')
    script.add_text('  [[ -z "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $PIP_DOWNLOAD_CACHE' &&''')
    script.add_line(' return 63')
    script.add_line('''  echo "INFO: Remembering PIP_DOWNLOAD_CACHE='$PIP_DOWNLOAD_CACHE'"''')
    script.add_line('fi')
    script.add_text('[[ ! -d "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.add_line(' mkdir -p "$PIP_DOWNLOAD_CACHE"')
    script.add_text('[[ ! -d "$PIP_DOWNLOAD_CACHE" ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '$PIP_DOWNLOAD_CACHE'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure Python virtual environment (PVE)')
    script.add_blank_line()
    script.add_line('export PIP_REQUIRE_VIRTUALENV=true')
    script.add_line('export PIP_RESPECT_VIRTUALENV=true')
    script.add_blank_line()
    script.add_line('Script=${DirPVE}/bin/activate')
    script.add_text('if [[ ! -f "${Script}" ]];')
    script.add_line(' then')
    script.add_line('  # If the virtual environment does not already exist, create it')
    script.add_line('  # TODO: This code assumes that the Python virtual environment package is')
    script.add_line('  # already installed, but it may not be.  Eventually we should handle that,')
    script.add_line('  # either with a more-specific message or by actually installing it.')
    script.add_line('''  echo "WARN: Creating Python virtual environment (PVE) in '${DirPVE}'"''')
    script.add_line('''  echo "WARN: This requires the 'python-virtualenv' package to have been installed"''')
    script.add_line('  virtualenv "${DirPVE}"')
    script.add_line('  Status=$?')
    script.add_text('  [[ ${Status} -ne 0 ]] &&')
    script.add_text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.add_line(' return ${Status}')
    script.add_line('fi')
    script.add_blank_line()
    script.add_text('[[ ! -d "${DirPVE}" ]] &&')
    script.add_text(''' echo "FATAL: Missing directory '${DirPVE}'" &&''')
    script.add_line(' return 63')
    script.add_text('[[ ! -f "${Script}" ]] &&')
    script.add_text(''' echo "FATAL: Missing script '${Script}'" &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('source ${Script}')
    script.add_blank_line()
    script.add_line('Status=$?')
    script.add_text('[[ ${Status} -ne 0 ]] &&')
    script.add_text(''' echo "FATAL: Exit code ${Status} at '$0':$LINENO" &&''')
    script.add_line(' return ${Status}')
    script.add_blank_line()
    script.add_text('[[ -z "$VIRTUAL_ENV" ]] &&')
    script.add_text(''' echo 'FATAL: Missing $VIRTUAL_ENV' &&''')
    script.add_line(' return 63')
    script.add_line('export PYTHONHOME=$VIRTUAL_ENV')
    script.add_text('[[ -z "$PYTHONHOME"  ]] &&')
    script.add_text(''' echo 'FATAL: Missing $PYTHONHOME'  &&''')
    script.add_line(' return 63')
    script.add_blank_line()
    script.add_line('''echo "INFO: Activated Python virtual environment (PVE) in '${DirPVE}'"''')
    script.add_line('''echo "INFO: Found '$(python --version 2>&1)' at '$(which python)'"''')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_briteonyx_bootstrap(script, target_directory, target_file):
    script.add_source_header()
    script.add_note("By convention, BriteOnyx is configured via environment variables prefixed by 'BO_'.")
    script.add_blank_line()
    script.add_text('''boVariableRequire 'BO_Project' ||''')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Copy starter files into place as necessary')
    script.add_blank_line()
    script.add_line('DirSrc=$BO_Project/BriteOnyx/starter')
    script.add_line('DirTgt=$BO_Project')
    script.add_blank_line()
    script.add_text('[[ ! -f $DirTgt/.hgignore ]] &&')
    script.add_line(' cp $DirSrc/project.hgignore $DirTgt/sample.hgignore')
    script.add_blank_line()
    script.add_line('FileTgt=$DirTgt/declare.src')
    script.add_text('[[ ! -f $FileTgt ]] &&')
    script.add_line(' cp $DirSrc/project-declare.src $FileTgt')
    script.add_blank_line()
    script.add_line('FileTgt=$DirTgt/development.rst')
    script.add_text('[[ ! -f $FileTgt ]] &&')
    script.add_line(' cp $DirSrc/project-development.rst $FileTgt')
    script.add_blank_line()
    script.add_line('FileTgt=$DirTgt/env.src')
    script.add_text('[[ ! -f $FileTgt ]] &&')
    script.add_line(' cp $DirSrc/project-env.src $FileTgt')
    script.add_blank_line()
    script.add_line('FileTgt=$DirTgt/README.rst')
    script.add_text('[[ ! -f $FileTgt ]] &&')
    script.add_line(' cp $DirSrc/project-README.rst $FileTgt')
    script.add_blank_line()
    script.add_line('DirTgt=$BO_Project/bin')
    script.add_line('FileTgt=$DirTgt/all-fix-permissions.bash')
    script.add_text('[[ ! -f $FileTgt ]] &&')
    script.add_line(' cp $DirSrc/project-all-fix-permissions.bash $FileTgt')
    script.add_blank_line()
    script.add_line('DirTgt=$BO_Project/bin/helper/Linux')
    script.add_text('[[ ! -e $DirTgt ]] &&')
    script.add_line(' mkdir -p $DirTgt')
    script.add_line('FileTgt=$DirTgt/declare-BASH.src')
    script.add_text('[[ ! -f $FileTgt ]] &&')
    script.add_line(' cp $DirSrc/project-declare-BASH.src $FileTgt')
    script.add_blank_line()
    script.add_line('DirTgt=$HOME')
    script.add_line('FileTgt=$DirTgt/.BriteOnyx.src')
    script.add_comment('Move previous scripts to new path')
    script.add_text('[[   -f $DirTgt/BriteOnyx-env.bash ]] &&')
    script.add_line(' mv $DirTgt/BriteOnyx-env.bash $FileTgt')
    script.add_text('[[   -f $DirTgt/BriteOnyx-env.src  ]] &&')
    script.add_line(' mv $DirTgt/BriteOnyx-env.src  $FileTgt')
    script.add_text('[[ ! -f $FileTgt ]] &&')
    script.add_line(' cp $DirSrc/user-BriteOnyx.src $FileTgt')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure for this user')
    script.add_blank_line()
    script.add_line('Script=$HOME/.BriteOnyx.src')
    script.add_text('boScriptRequire "$Script" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_text('source          "$Script" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure for this project')
    script.add_blank_line()
    script.add_line('Script=$BO_Project/env.src')
    script.add_text('boScriptRequire $Script ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_text('source          $Script ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Configure for BriteOnyx')
    script.add_blank_line()
    script.add_line('Script="$BO_Project/BriteOnyx/env.src"')
    script.add_text('boScriptRequire "$Script" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_text('source          "$Script" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify BriteOnyx bootstrap configuration')
    script.add_blank_line()
    script.add_text('''boVariableRequire 'BO_Parent'  ||''')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_text('''boVariableRequire 'BO_Url'     ||''')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_text('''boVariableRequire 'BO_Version' ||''')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_rule()
    script.add_line(": <<'DisabledContent'")
    script.add_comment('Checkout the BriteOnyx source')
    script.add_blank_line()
    script.add_text('boDirectoryCreate "$BO_Parent" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_text('[[ -z "$BO_Home" ]] &&')
    script.add_line(''' export BO_Home=$(boNodeCanonical "$BO_Parent/$BO_Version")''')
    script.add_text('''boVariableRequire 'BO_Home' ||''')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_text('if boDirectoryExists "$BO_Home" ;')
    script.add_line(' then')
    script.add_line('''  boLogDebug "Directory '$BO_Home' already exists, skipping Mercurial clone."''')
    script.add_text('elif [[ "$BO_Version" == "predeployed" ]];')
    script.add_line(' then')
    script.add_line('''  boLogWarn "Ignoring Mercurial clone of version '$BO_Version'"''')
    script.add_line('else')
    script.add_line('''  boLogInfo "Cloning version '$BO_Version' from '$BO_Url' into '$BO_Home'..."''')
    script.add_line('  Cmd="hg clone"')
    script.add_line('  Cmd+=" --rev $BO_Version"')
    script.add_line('  Cmd+=" $BO_Url"')
    script.add_line('  Cmd+=" $BO_Home"')
    script.add_line('''  Msg="Mercurial failed to clone into directory '$BO_Home'!"''')
    script.add_text('  boExecute "$Cmd" "$Msg" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_line('fi')
    script.add_blank_line()
    script.add_text('boDirectoryRequire "$BO_Home" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_text('if [[ "$BO_Version" == "tip" ]];')
    script.add_line(' then')
    script.add_line("  # Update Mercurial clone of 'tip' to support development of BriteOnyx framework")
    script.add_line('''  boLogInfo "Updating clone of version '$BO_Version' from '$BO_Url' into '$BO_Home'..."''')
    script.add_text('  cd "$BO_Home" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_line('  Cmd="hg pull --update"')
    script.add_line('''  Msg="Mercurial failed to update clone in directory '$BO_Home'!"''')
    script.add_text('  boExecute "$Cmd" "$Msg" ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_line('else')
    script.add_line('''  boLogDebug "BriteOnyx version '$BO_Version' should be stable, skipping update of clone."''')
    script.add_line('fi')
    script.add_line('DisabledContent')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_briteonyx_declare(script, target_directory, target_file):
    script.add_source_header()
    script.add_note('Assumes this project has been activated using the BriteOnyx framework.')
    script.add_note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.add_rule()
    script.add_note('Uncomment the following two lines for debugging')
    script.add_comment('set -o verbose')
    script.add_comment('set -o xtrace')
    script.add_someday('Add inverse commands to isolate debugging')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Declare needed functionality to support the BriteOnyx framework')
    script.add_note("We use the 'bo' prefix by convention for all our BriteOnyx support functions.")
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Functions in this section should NOT call functions from following sections')
    script.add_blank_line()
    script.add_line('boLog () {')
    script.add_line('  # Log the message $1 to STDERR')
    script.add_line('  # NOTE:  Should only be called from this script')
    script.add_line('  # $1 = message')
    script.add_line('  echo -e "$1" >&2')
    script.add_line('} && export -f boLog')
    script.add_blank_line()
    script.add_line('boNodeCanonical () {')
    script.add_line('  # Return the canonical pathname for file system node $1')
    script.add_line('  # NOTE: Must be called via command substitution, e.g.:')
    script.add_line('''  #   "$(boNodeCanonical '$1')"''')
    script.add_line('  [[ $# -eq 1 ]] || return 100')
    script.add_line('  # $1 = pathname of file system node')
    script.add_line('  declare Result')
    script.add_line('  # NOTE: This call to "readlink" is not supported on Apple Mac OS X, so deal with it...')
    script.add_line('  Result="$(readlink -m $1)"')
    script.add_line('  [[ $? -eq 0   ]] && echo "$Result" && return 0')
    script.add_line('  [[ "$1" = "." ]] && echo "$PWD"       && return 0')
    script.add_line('  echo "$1"')
    script.add_line('} && export -f boNodeCanonical')
    script.add_blank_line()
    script.add_line('boTrace () {')
    script.add_line('  # Trace message $1')
    script.add_line('  # $1 = message')
    script.add_line('  [[ -n "$BO_Trace" ]] && boLog "TRACE: $1"')
    script.add_line('} && export -f boTrace')
    script.add_blank_line()
    script.add_line('boTraceEntry () {')
    script.add_line('  # Trace the entry of execution into caller with source location name $1 and line $2 called with')
    script.add_line('  #   argument count $3 and arguments $4')
    script.add_line('  [[ $# -eq 4 ]] || return 100')
    script.add_line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.add_line('  # $2 = caller source location line ($LINENO)')
    script.add_line('  # $3 = caller argument count ($#)')
    script.add_line('  # $4 = caller arguments ($*)')
    script.add_line('''  boTrace "'$1:$2' called with $3 args: '$4'"''')
    script.add_line('} && export -f boTraceEntry')
    script.add_blank_line()
    script.add_line('boTraceValue () {')
    script.add_line('  # Trace value $2 described as $1')
    script.add_line('  [[ $# -eq 2 ]] || return 100')
    script.add_line('  # $1 = description of value')
    script.add_line('  # $2 = value')
    script.add_line('''  boTrace "$1 = '$2'"''')
    script.add_line('} && export -f boTraceValue')
    script.add_blank_line()
    script.add_line('boTraceVariable () {')
    script.add_line('  # Trace environment variable $1')
    script.add_line('  [[ $# -eq 1 ]] || return 100')
    script.add_line('  # $1 = name of environment variable')
    script.add_line('  declare -r Name="$1"')
    script.add_line('  declare -r Value="${!Name}"')
    script.add_line('''  boTraceValue "Variable '$Name'" "$Value"''')
    script.add_line('} && export -f boTraceVariable')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Functions in this section should NOT call functions from following sections')
    script.add_blank_line()
    script.add_line('boDirectoryExists () {')
    script.add_line('  boNodeIsDirectory "$1"')
    script.add_line('} && export -f boDirectoryExists')
    script.add_blank_line()
    script.add_line('boFileExists () {')
    script.add_line('  boNodeIsFile "$1"')
    script.add_line('} && export -f boFileExists')
    script.add_blank_line()
    script.add_line('boNodeExists () {')
    script.add_line('  # Return whether node $1 exists')
    script.add_line('  [[ $# -eq 1 ]] || return 100')
    script.add_line('  # $1 = node pathname')
    script.add_line('  [[ -e "$1" ]]')
    script.add_line('} && export -f boNodeExists')
    script.add_blank_line()
    script.add_line('boNodeIsDirectory () {')
    script.add_line('  # Return whether node $1 is a directory')
    script.add_line('  [[ $# -eq 1 ]] || return 100')
    script.add_line('  # $1 = node pathname')
    script.add_line('  [[ -d "$1" ]]')
    script.add_line('} && export -f boNodeIsDirectory')
    script.add_blank_line()
    script.add_line('boNodeIsFile () {')
    script.add_line('  # Return whether node $1 is a file')
    script.add_line('  [[ $# -eq 1 ]] || return 100')
    script.add_line('  # $1 = node pathname')
    script.add_line('  [[ -f "$1" ]]')
    script.add_line('} && export -f boNodeIsFile')
    script.add_blank_line()
    script.add_line('boVariableIsMissing () {')
    script.add_line('  # Return whether environment variable $1 is missing (undefined or empty)')
    script.add_line('  [[ $# -eq 1 ]] || return 100')
    script.add_line('  # $1 = name of environment variable')
    script.add_line('  declare -r Name="$1"')
    script.add_line('  declare -r Value="${!Name}"')
    script.add_line('  [[ -z "$Value" ]]')
    script.add_line('} && export -f boVariableIsMissing')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Functions in this section should NOT call functions from following sections')
    script.add_blank_line()
    script.add_line('boLogDebug () {')
    script.add_line('  boLog "DEBUG: $1"')
    script.add_line('} && export -f boLogDebug')
    script.add_blank_line()
    script.add_line('boLogError () {')
    script.add_line('  boLog "ERROR: $1"')
    script.add_line('} && export -f boLogError')
    script.add_blank_line()
    script.add_line('boLogFatal () {')
    script.add_line('  boLog "FATAL: $1"')
    script.add_line('} && export -f boLogFatal')
    script.add_blank_line()
    script.add_line('boLogInfo () {')
    script.add_line('  boLog "INFO:  $1"')
    script.add_line('} && export -f boLogInfo')
    script.add_blank_line()
    script.add_line('boLogWarn () {')
    script.add_line('  boLog "WARN:  $1"')
    script.add_line('} && export -f boLogWarn')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Functions in this section should NOT call functions from following sections')
    script.add_blank_line()
    script.add_line('boAbort () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('''  # Abort execution due to previous command's status $3 while reporting fatal log message $5''')
    script.add_line('  #   (including source location name $1 and line $2) and propagating outgoing status code $4')
    script.add_line('  # TODO: Rename to boFail?')
    script.add_line('  [[ $# -eq 5 ]] || return 100')
    script.add_line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.add_line('  # $2 = caller source location line ($LINENO)')
    script.add_line('  # $3 = incoming status code from previous command ($?, non-zero)')
    script.add_line('  # $4 = outgoing status code (repeat $? unless overriding)')
    script.add_line('  # $5 = message')
    script.add_line('  [[ "$3" -eq 0 ]] && return 100')
    script.add_line('''  boLogFatal "ABORT: Status $3 at '$1:$2' -> status $4: $5"''')
    script.add_line('  return "$4"')
    script.add_line('} && export -f boAbort')
    script.add_blank_line()
    script.add_line('boFailed () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('''  # Log failed execution due to previous command's status $3 as reported at source location name''')
    script.add_line('  #   $1 and line $2, then propagate the failed status')
    script.add_line('  [[ $# -eq 3 ]] || return 100')
    script.add_line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.add_line('  # $2 = caller source location line ($LINENO)')
    script.add_line('  # $3 = incoming status code from previous command ($?, non-zero)')
    script.add_line('  [[ "$3" -eq 0 ]] && return 100')
    script.add_line('''  boLogFatal "FAILED: Status $3 at '$1:$2'"''')
    script.add_line('  return "$3"')
    script.add_line('} && export -f boFailed')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Functions in this section should NOT call functions from following sections')
    script.add_blank_line()
    script.add_line('boArgsRequire () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('  # Require that the actual argument count $3 equal the expected argument count $4 in the caller')
    script.add_line('  #   with source location name $1 and line $2')
    script.add_line('  [[ $# -eq 4 ]] || return 100')
    script.add_line('  # $1 = caller source location name ($FUNCNAME or $0)')
    script.add_line('  # $2 = caller source location line ($LINENO)')
    script.add_line('  # $3 = actual argument count ($#)')
    script.add_line('  # $4 = expected argument count')
    script.add_line('  declare -r Msg="Expected $4 arguments but got $3!"')
    script.add_line('  [[ $3 -eq $4 ]] || boAbort "$1" "$2" $? 100 "$Msg" || return $?')
    script.add_line('} && export -f boArgsRequire')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Functions in this section should NOT call functions from following sections')
    script.add_blank_line()
    script.add_line('boDirectoryCreate () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('  # Create directory $1, if it does not already exist')
    script.add_line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.add_line('  # $1 = directory pathname')
    script.add_line('''  declare Msg="Directory '$1' already exists, skipping creation."''')
    script.add_line('  boNodeIsDirectory "$1" && boLogDebug "$Msg"                            && return $?')
    script.add_line('''  Msg="Unable to create directory '$1', failed!"''')
    script.add_line('  mkdir -p "$1"           || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.add_line('  boDirectoryRequire "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.add_line('} && export -f boDirectoryCreate')
    script.add_blank_line()
    script.add_line('boDirectoryRequire () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('  # Require directory $1, abort if it is missing')
    script.add_line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.add_line('  # $1 = pathname of required directory')
    script.add_line('  boNodeIsDirectory "$1" && return $?')
    script.add_line('''  Msg="Directory '$1' is required but is missing!"''')
    script.add_line('  boNodeExists "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.add_line('''  Msg="Directory '$1' is required but is blocked by a non-directory!"''')
    script.add_line('  boAbort "$FUNCNAME" "$LINENO" 100 100 "$Msg" || return $?')
    script.add_line('} && export -f boDirectoryRequire')
    script.add_blank_line()
    script.add_line('boFileRequire () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('  # Require that file $1 exists, abort if it is missing')
    script.add_line('  # TODO: Should we check other characteristics like readability or executability?')
    script.add_line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.add_line('  # $1 = required script file pathname')
    script.add_line('''  declare -r Msg="File '$1' is required but missing!"''')
    script.add_line('  boNodeIsFile "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.add_line('} && export -f boFileRequire')
    script.add_blank_line()
    script.add_line('boScriptRequire () {')
    script.add_line('  # Require that script file $1 exists, abort if it is missing')
    script.add_line('  # TODO: Should we check other characteristics like readability or executability?')
    script.add_line('  boFileRequire "$1" || boFailed "$FUNCNAME" "$LINENO" $? || return $?')
    script.add_line('} && export -f boScriptRequire')
    script.add_blank_line()
    script.add_line('boVariableRequire () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('  # Require environment variable $1, abort if it is missing')
    script.add_line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 1 || return $?')
    script.add_line('  # $1 = name of required environment variable')
    script.add_line('''  declare -r Msg="Variable '$1' is required but is undefined or empty!"''')
    script.add_line('  ! boVariableIsMissing "$1" || boAbort "$FUNCNAME" "$LINENO" $? 100 "$Msg" || return $?')
    script.add_line('} && export -f boVariableRequire')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Functions in this section should NOT call functions from following sections')
    script.add_blank_line()
    script.add_line('boExecute () {')
    script.add_line('  boTraceEntry "$FUNCNAME" "$LINENO" $# "$*"')
    script.add_line('  # Execute command $1; if it fails, abort with message $2')
    script.add_line('  boArgsRequire "$FUNCNAME" "$LINENO" $# 2 || return $?')
    script.add_line('  # $1 = command to execute')
    script.add_line('  # $2 = message for abort upon failure')
    script.add_line('  boLogDebug "Executing command: $1"')
    script.add_line('  $1 || boAbort "$FUNCNAME" "$LINENO" $? $? "$2" || return $?')
    script.add_line('} && export -f boExecute')
    script.add_blank_line()
    script.add_rule()
    script.add_comment("Successfully 'return', but do NOT 'exit'")
    script.add_line('return 0')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_briteonyx_environment(script, target_directory, target_file):
    script.add_source_header()
    script.add_comment('Configure BriteOnyx deployment')
    script.add_someday('Keep BO_Version updated to latest published revision')
    script.add_blank_line()
    script.add_text('[[ -z "$BO_Parent"  ]] &&')
    script.add_line(' export BO_Parent=$HOME/.BO')
    script.add_text('[[ -z "$BO_Version" ]] &&')
    script.add_line(' export BO_Version=rev36')
    script.add_text('[[ -z "$BO_Home"    ]] &&')
    script.add_line(' export BO_Home=$BO_Parent/$BO_Version')
    script.add_blank_line()
    script.add_line("alias functions='declare -F | sort'")
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_project_environment(script, target_directory, target_file):
    script.add_source_header()
    script.add_comment('Configure this project')
    script.add_blank_line()
    script.add_comment('TODO: Implement')
    script.add_line('export BO_ProjectName=TODO')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def _generate_user_environment(script, target_directory, target_file):
    script.add_source_header()
    script.add_note('Declare needed environment variables here')
    script.add_blank_line()
    script.add_comment('TODO: Implement as needed, but defer to $BO_Project/BriteOnyx/env.src for now')
    script.add_blank_line()
    script.add_rule()
    script.add_line(": <<'DisabledContent'")
    script.add_note('Copy this content above, to override system portion of final PATH')
    script.add_line('export BO_PathSystem=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin')
    script.add_line('DisabledContent''')
    _generate(script, target_directory, target_file)

def _generate_project_maybe_activate(script, target_directory, target_file):
    script.add_source_header()
    script.add_note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
    script.add_rule()
    script.add_note('Uncomment the following two lines for debugging')
    script.add_comment('set -o verbose')
    script.add_comment('set -o xtrace')
    script.add_someday('Add inverse commands to isolate debugging')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Skip if BriteOnyx is already activated')
    script.add_blank_line()
    script.add_line("Msg='$BO_Home is defined, assuming BriteOnyx already activated'")
    script.add_text('[[ -n "$BO_Home" ]] &&')
    script.add_text(' logDebug "$Msg" &&')
    script.add_line(' return 0')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Activate BriteOnyx')
    script.add_blank_line()
    script.add_line('Script="$(dirname "$0")/../activate.src"')
    script.add_text('[[ ! -f "$Script" ]] &&')
    script.add_text(''' echo "FATAL: Missing script '$Script'" &&''')
    script.add_line(' return 63')
    script.add_text('source "$Script";')
    script.add_line(' Status=$?')
    script.add_line('''Msg="FATAL: Status $Status at '$0:$LINENO'"''')
    script.add_text('[[ $Status -ne 0 ]] &&')
    script.add_text(' echo "$Msg" &&')
    script.add_line(' return $Status')
    script.add_blank_line()
    script.add_rule()
    script.add_comment('Verify post-conditions')
    script.add_blank_line()
    script.add_text('boVariableRequire   BO_Home ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_text('boDirectoryRequire $BO_Home ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_text('boVariableRequire   BO_Project ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_text('boDirectoryRequire $BO_Project ||')
    script.add_text(' boFailed "$0" "$LINENO" $? ||')
    script.add_line(' return $?')
    script.add_blank_line()
    script.add_rule()
    script.add_comment("Successfully 'return', but do NOT 'exit'")
    script.add_line('return 0')
    script.add_disabled_content_footer()
    _generate(script, target_directory, target_file)

def main():
    try:
        configure_logging()
        LOG.debug("main() try = began")

        parser = argparse.ArgumentParser()
        parser.add_argument('source_directory', help='from which to generate output')
        parser.add_argument('target_directory', help='into which to generate output')
        args = parser.parse_args()

        LOG.info("Generating scripts from directory '{0}' into directory '{1}'".format(
            args.source_directory, args.target_directory
        ))
        recreate_directory(args.target_directory)

        directory = os.path.join(args.target_directory, 'helper', 'activation')
        maybe_create_directory(directory)
        _generate_linux_activate(LinuxActivateScript(), directory, 'activate.src')

        directory = os.path.join(args.target_directory, 'helper', 'activation', 'add_on')
        maybe_create_directory(directory)
        _generate_gradle_activate(GradleActivateScript(), directory, 'activate-Gradle.src')
        _generate_python_activate(PythonActivateScript(), directory, 'activate-Python.src')

        directory = os.path.join(args.target_directory, 'sample_project')
        maybe_create_directory(directory)
        _generate_project_activate(ProjectActivateScript(), directory, 'activate.src')

        directory = os.path.join(args.target_directory, 'sample_project', 'BriteOnyx')
        maybe_create_directory(directory)
        _generate_briteonyx_bootstrap(BriteOnyxBootstrapScript(), directory, 'bootstrap.src')
        _generate_briteonyx_declare(BriteOnyxDeclareScript(), directory, 'declare.src')
        _generate_briteonyx_environment(BriteOnyxEnvironmentScript(), directory, 'env.src')
        _generate_project_maybe_activate(ProjectMaybeActivateScript(), directory, 'maybeActivate.src')

        directory = os.path.join(args.target_directory, 'sample_project', 'BriteOnyx', 'starter')
        maybe_create_directory(directory)
        _generate_project_environment(ProjectEnvironmentScript(), directory, 'project-env.src')
        _generate_user_environment(UserEnvironmentScript(), directory, 'user-BriteOnyx.src')
    except Exception as e:
        LOG.error("main() except Exception = failure")
        LOG.exception(e)
        sys.exit(1)
    else:
        LOG.debug("main() else = success")
        sys.exit(0)
    finally:
        LOG.debug("main() finally = ended")


if __name__ == '__main__':
    main()


""" Disabled content
"""

