from script_bash import BashScript


class ProjectActivateScript(BashScript):
    def __init__(self):
        BashScript.__init__(self)

    def abort_if_activated(self):
        self.add_blank_line()
        self.add_rule()
        self.add_note('ABORT: if project is already activated')
        self.add_text('[[ -n "$BO_Project" ]] &&')
        self.add_text(''' echo "FATAL: Project '$BO_Project' is already activated, aborting" &&''')
        self.add_line(' exit 100')

    def activate_for_linux(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Activate as a Linux project')
        self.add_blank_line()
        self.add_line('Script="$BO_Home/helper/activation/activate.src"')
        self.add_text('boScriptRequire "$Script" ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')
        self.add_text('source          "$Script" ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')

    def add_activation_comments(self):
        self.add_note("We MUST NOT EVER 'exit' during BriteOnyx bootstrap or activation")
        self.add_rule()
        self.add_debugging_comment()
        self.add_someday('Add inverse commands to isolate debugging')
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Activate the BriteOnyx framework to manage this project directory tree')
        self.add_blank_comment()
        self.add_note("This script, and EVERY script that it calls, must NOT invoke 'exit'!  The user calling this")
        self.add_comment('  script must be allowed to preserve their shell and every effort must be made to inform the user')
        self.add_comment('  of problems while continuing execution where possible.  Terminating the shell robs the user of')
        self.add_comment("  useful feedback and interrupts their work, which is unacceptable.  Instead, the BASH 'return'")
        self.add_comment('  statement should be invoked to end execution with an appropriate status code.')
        self.add_blank_comment()
        self.add_someday('Verify that $BO_Project does indeed point to the root of our project directory tree')

    def capture_incoming_environment(self):
        self.add_blank_line()
        self.add_comment('Capture incoming BASH environment')
        self.add_text('if [[ -n "$TMPDIR" ]] ;')
        self.add_line(' then')
        self.add_line('  env | sort >$TMPDIR/BO-env-incoming.out')
        self.add_text('elif [[ -n "$BO_Project" ]] ;')
        self.add_line(' then')
        self.add_line('  env | sort >$BO_Project/BO-env-incoming.out')
        self.add_line('else')
        self.add_line('  env | sort >$PWD/BO-env-incoming.out')
        self.add_line('fi')

    def capture_outgoing_environment(self):
        self.add_blank_line()
        self.add_comment('Capture outgoing BASH environment')
        self.add_text('if [[ -n "$TMPDIR" ]] ;')
        self.add_line(' then')
        self.add_line('  env | sort >$TMPDIR/BO-env-outgoing.out')
        self.add_text('elif [[ -n "$BO_Project" ]] ;')
        self.add_line(' then')
        self.add_line('  env | sort >$BO_Project/BO-env-outgoing.out')
        self.add_line('else')
        self.add_line('  env | sort >$PWD/BO-env-outgoing.out')
        self.add_line('fi')

    def configure_for_briteonyx(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Configure for BriteOnyx')
        self.add_blank_line()
        self.add_line('Script="$BO_Project/BriteOnyx/env.src"')
        self.add_text('boScriptRequire "$Script" ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')
        self.add_text('source          "$Script" ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')

    def configure_for_project(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Configure for this project')
        self.add_blank_line()
        self.add_line('Script=$BO_Project/env.src')
        self.add_text('boScriptRequire $Script ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')
        self.add_text('source          $Script ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')

    def configure_for_user(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Configure for this user')
        self.add_blank_line()
        self.add_line('Script=$HOME/.BriteOnyx.src')
        self.add_text('boScriptRequire "$Script" ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')
        self.add_text('source          "$Script" ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')

    def copy_starter_files(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Copy starter files into place as necessary')
        self.add_blank_line()
        self.add_line('DirSrc=$BO_Project/BriteOnyx/starter')
        self.add_blank_line()
        self.add_line('boVariableRequire HOME')
        self.add_line('DirTgt=$HOME')
        self.add_text('[[ ! -e "$DirTgt" ]] &&')
        self.add_line(' mkdir -p $DirTgt')
        self.add_blank_line()
        self.add_line('FileTgt=$DirTgt/.BriteOnyx.src')
        self.add_comment('Move previous scripts to new path')
        self.add_text('[[   -f $DirTgt/BriteOnyx.src      ]] &&')
        self.add_line(' mv $DirTgt/BriteOnyx.src      $FileTgt')
        self.add_text('[[   -f $DirTgt/BriteOnyx-env.bash ]] &&')
        self.add_line(' mv $DirTgt/BriteOnyx-env.bash $FileTgt')
        self.add_text('[[   -f $DirTgt/BriteOnyx-env.src  ]] &&')
        self.add_line(' mv $DirTgt/BriteOnyx-env.src  $FileTgt')
        self.add_comment('Copy starter script, if necessary')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/user-BriteOnyx.src $FileTgt')
        self.add_blank_line()
        self.add_line('DirTgt=$BO_Project')
        self.add_text('[[ ! -e "$DirTgt" ]] &&')
        self.add_line(' mkdir -p $DirTgt')
        self.add_blank_line()
        self.add_line('FileTgt=$DirTgt/env.src')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/project-env.src $FileTgt')
        self.add_blank_line()
        self.add_line('FileTgt=$DirTgt/.hgignore')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/project.hgignore $FileTgt')
        self.add_blank_line()
        self.add_line('DirTgt=$BO_Project/bin')
        self.add_text('[[ ! -e "$DirTgt" ]] &&')
        self.add_line(' mkdir -p $DirTgt')
        self.add_blank_line()
        self.add_line('FileTgt=$DirTgt/project-fix-permissions.bash')
        self.add_comment('Move previous scripts to new path')
        self.add_text('[[   -f $DirTgt/all-fix-permissions.bash ]] &&')
        self.add_line(' mv $DirTgt/all-fix-permissions.bash $FileTgt')
        self.add_comment('Copy starter script, if necessary')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/project-fix-permissions.bash $FileTgt')
        self.add_blank_line()
        self.add_line(": <<'DisabledContent'")
        self.add_line('FileTgt=$DirTgt/declare.src')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/project-declare.src $FileTgt')
        self.add_blank_line()
        self.add_line('FileTgt=$DirTgt/development.rst')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/project-development.rst $FileTgt')
        self.add_blank_line()
        self.add_line('FileTgt=$DirTgt/README.rst')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/project-README.rst $FileTgt')
        self.add_blank_line()
        self.add_line('DirTgt=$BO_Project/bin/helper/Linux')
        self.add_text('[[ ! -e $DirTgt ]] &&')
        self.add_line(' mkdir -p $DirTgt')
        self.add_blank_line()
        self.add_line('FileTgt=$DirTgt/declare-BASH.src')
        self.add_text('[[ ! -f $FileTgt ]] &&')
        self.add_line(' cp $DirSrc/project-declare-BASH.src $FileTgt')
        self.add_line('DisabledContent')

    def create_random_tmpdir(self):
        self.add_blank_line()
        self.add_comment('Create random TMPDIR')
        self.add_line('Dir=$(mktemp --tmpdir -d BO-XXXXXXXX)')
        self.add_text('[[ -d "$Dir" ]] &&')
        self.add_line(' export TMPDIR=$Dir')

    def declare_for_bootstrap(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Declare BriteOnyx support functionality')
        self.add_blank_line()
        self.add_line('Script="$BO_Project/BriteOnyx/declare.src"')
        self.add_text('[[ ! -f "$Script" ]] &&')
        self.add_text(''' echo "FATAL: Missing script '$Script'" &&''')
        self.add_line(' return 63')
        self.add_text('source "$Script" ;')
        self.add_line(' Status=$?')
        self.add_text('[[ "${Status}" -ne 0 ]] &&')
        self.add_text(''' echo "FATAL: Script exited with '${Status}'" &&''')
        self.add_line(' return ${Status}')
        self.add_blank_line()
        self.add_rule()
        self.add_note('Now that we have our support functionality declared, we can use it from here on')

    def declare_for_project(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Declare optional project functionality')
        self.add_blank_line()
        self.add_line('Script="$BO_Project/declare.src"')
        self.add_text('if [[ -f "$Script" ]] ;')
        self.add_line(' then')
        self.add_text('  source "$Script" ;')
        self.add_line(' Status=$?')
        self.add_text('  [[ "${Status}" -ne 0 ]] &&')
        self.add_text(''' echo "FATAL: Script exited with '${Status}'" &&''')
        self.add_line(' return ${Status}')
        self.add_line('fi')

    def demonstrate_logging(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Demonstrate logging')
        self.add_blank_line()
        self.add_line('logDebug  "EXAMPLE: This is a debugging message"')
        self.add_line('logInfo   "EXAMPLE: This is an informational message"')
        self.add_line('logWarn   "EXAMPLE: This is a warning message"')
        self.add_line('logError  "EXAMPLE: This is an error message"')
        self.add_line('_logFatal "EXAMPLE: This is a fatal message"')

    def initialize_logging_file(self):
        self.add_blank_line()
        self.add_comment('Initialize BriteOnyx logging file')
        self.add_line('BO_FileLog=BO.log')
        self.add_text('if [[ -n "$TMPDIR" ]] ;')
        self.add_line(' then')
        self.add_line('  export BO_FileLog=$TMPDIR/$BO_FileLog')
        self.add_text('elif [[ -n "$BO_Project" ]] ;')
        self.add_line(' then')
        self.add_line('  export BO_FileLog=$BO_Project/$BO_FileLog')
        self.add_line('else')
        self.add_line('  export BO_FileLog=$PWD/$BO_FileLog')
        self.add_line('fi')
        self.add_line('echo "INFO:  Activating..." >$BO_FileLog')
        self.add_line('echo "INFO:  Activating the BriteOnyx framework for this project..."')
        self.add_line('''echo "WARN:  This script MUST be executed as 'source activate.src', WAS IT?"''')

    def normalize_reference_to_project_root(self):
        self.add_blank_line()
        self.add_text('''boVariableRequire 'BO_Project' ||''')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')
        self.add_line("boTraceVariable 'BO_Project'")
        self.add_line('export BO_Project="$(boNodeCanonical $BO_Project)"')
        self.add_line("boTraceVariable 'BO_Project'")
        self.add_line('''boLogInfo "Canonical form of BO_Project directory pathname is '$BO_Project'"''')
        self.add_text('boDirectoryRequire "$BO_Project" ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')

    def remember_path(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Remember PATH')
        self.add_blank_line()
        self.add_line('[[ -z "$BO_PathSystem" ]] && \\')
        self.add_line('  export BO_PathSystem=$PATH && \\')
        self.add_line('''  echo "INFO:  Remembering BO_PathSystem='$BO_PathSystem'"''')

    def remember_project_root(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Remember the directory containing this script as our project root')
        self.add_blank_line()
        self.add_line('export BO_Project="$(dirname $BASH_SOURCE)"')
        self.add_blank_line()
        self.add_todo('REVIEW: Shall we NOT cd into our project directory since it changes')
        self.add_comment("the caller's execution environment?")
        self.add_comment('cd "$BO_Project" || return $?')

    def set_tmpdir(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Set TMPDIR ')
        self.add_comment('DISABLED: MOVED: to Linux activation script')
        self.add_blank_line()
        self.add_comment('export TMPDIR=$TMPDIR/$BO_ProjectName')
        self.add_line('''# echo "INFO:  Remembering TMPDIR='$TMPDIR'"''')

    def shutdown(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Shutdown')
        self.add_blank_line()
        self.add_line('''logInfo "Project '$BO_ProjectName' in directory '$BO_Project' is now activated, done."''')
        self.capture_outgoing_environment()

    def verify_bootstrap(self):
        self.add_blank_line()
        self.add_rule()
        self.add_comment('Verify BriteOnyx bootstrap configuration')
        self.add_blank_line()
        self.add_text('boVariableRequire   BO_Home ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')
        self.add_text('boDirectoryRequire $BO_Home ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')
        self.add_blank_line()
        self.add_text('boVariableRequire BO_ProjectName ||')
        self.add_text(' boFailed "$0" "$LINENO" $? ||')
        self.add_line(' return $?')

        
""" Disabled content
"""

