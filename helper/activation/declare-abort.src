#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# Verify pre-conditions

[[ -z "$BO_E_Config" ]] && echo 'FATAL: Missing $BO_E_Config' && return 63
[[ -z "$BO_E_Ok"     ]] && echo 'FATAL: Missing $BO_E_Ok'     && return "$BO_E_Config"
[[ -z "$BO_E_Usage"  ]] && echo 'FATAL: Missing $BO_E_Usage'  && return "$BO_E_Config"

###################################################################################################

abort () {
  # Abort BASH execution with status $3 and message $4
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $BASH_SOURCE or $0)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code
  # $4 = message

  _logFatal "ABORT: exit $3 at $1:$2:  $4"
  if [[ "$SHLVL" -eq 1 ]] ; then
    logWarn 'At top level of BASH shell'
    # dumpBash
  fi
  exit $3
}
export -f abort

abortIfMissing () {
  # Abort with message $3 if value $4 is missing (resolves to empty string)
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $BASH_SOURCE or $0)
  # $2 = caller line number   (via $LINENO)
  # $3 = value that is required
  # $4 = message

  [[ -n "$3" ]] && return "$BO_E_Ok"
  # TODO: SOMEDAY: Choose better exit status from constants
  abort $1 $2 1 "Missing '$3'"
}
export -f abortIfMissing

abortOnFail () {
  # Abort on failure of previous command with status $3
  # from caller file/function $1 and line $2
  [[ "$#" -ne 3 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $BASH_SOURCE or $0)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code

  [[ "$3" -eq 0 ]] && return "$BO_E_Ok"
  abort $1 $2 $3 'Last command failed'
}
export -f abortOnFail

report () {
  # Report BASH execution with status $3 and message $4
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $BASH_SOURCE or $0)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code
  # $4 = message

  logError "REPORT: exit $3 at $1:$2:  $4"
}
export -f report

reportOnFail () {
  # Report on failure of last command with status $3
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $BASH_SOURCE or $0)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code

  [[ "$3" -eq 0 ]] && return "$BO_E_Ok"
  report $1 $2 $3 'Last command failed'
}
export -f reportOnFail

###################################################################################################
: <<'DisabledContent'
printStackTrace() {
  # NOTE: Requires extended debugging enabled, such as by 'shopt -s extdebug'
  # TODO: RESEARCH: Why does this seem not to work?
  set -o verbose
  set -o xtrace

  if shopt -q extdebug ; then
    declare frame=0
    declare argv_offset=0

    while caller_info=( $(caller $frame) ) ; do
      declare argv=()
      declare argc
      declare frame_argc

      for ((frame_argc=${BASH_ARGC[frame]},frame_argc--,argc=0; frame_argc >= 0; argc++, frame_argc--)) ; do
        argv[argc]=${BASH_ARGV[argv_offset+frame_argc]}
        case "${argv[argc]}" in
          *[[:space:]]*) argv[argc]="'${argv[argc]}'" ;;
        esac
      done
      argv_offset=$((argv_offset + ${BASH_ARGC[frame]}))
      echo ":: ${caller_info[2]}: Line ${caller_info[0]}: ${caller_info[1]}(): ${FUNCNAME[frame]} ${argv[*]}"

      frame=$((frame+1))
    done

    if [[ $frame -eq 1 ]] ; then
      caller_info=( $(caller 0) )
      echo ":: ${caller_info[2]}: Line ${caller_info[0]}: ${caller_info[1]}"
    fi
  else
    logWarn "Cannot print stack trace since BASH extended debugging is off"
  fi

  set +o xtrace
  set +o verbose
}
export -f printStackTrace

DisabledContent

