#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# Verify pre-conditions

[[ -z "$BO_E_Config" ]] && echo 'FATAL: Missing $BO_E_Config' && return 63
[[ -z "$BO_E_Ok"     ]] && echo 'FATAL: Missing $BO_E_Ok'     && return "$BO_E_Config"
[[ -z "$BO_E_Usage"  ]] && echo 'FATAL: Missing $BO_E_Usage'  && return "$BO_E_Config"

###################################################################################################

abort () {
  # Abort BASH execution with status $3 and message $4
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $0 or $Self)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code
  # $4 = message

  _logFatal "ABORT: exit $3 at $1:$2:  $4"
  if [[ "$SHLVL" -eq 1 ]] ; then
    logWarn 'At top level of BASH shell'
    # dumpBash
  fi
  exit $3
}
export -f abort

abortIfMissing () {
  # Abort with message $3 if value $4 is missing (resolves to empty string)
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $0 or $Self)
  # $2 = caller line number   (via $LINENO)
  # $3 = value that is required
  # $4 = message

  [[ -n "$3" ]] && return "$BO_E_Ok"
  # TODO: SOMEDAY: Choose better exit status from constants
  abort $1 $2 1 "Missing '$3'"
}
export -f abortIfMissing

abortOnFail () {
  # Abort on failure of previous command with status $3
  # from caller file/function $1 and line $2
  [[ "$#" -ne 3 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $0 or $Self)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code

  [[ "$3" -eq 0 ]] && return "$BO_E_Ok"
  abort $1 $2 $3 'Last command failed'
}
export -f abortOnFail

report () {
  # Report BASH execution with status $3 and message $4
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $0 or $Self)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code
  # $4 = message

  logError "REPORT: exit $3 at $1:$2:  $4"
}
export -f report

reportOnFail () {
  # Report on failure of last command with status $3
  # from caller file/function $1 and line $2
  [[ "$#" -ne 4 ]] && Oops && exit "$BO_E_Usage"
  # $1 = caller file/function (via $FUNCNAME or $0 or $Self)
  # $2 = caller line number   (via $LINENO)
  # $3 = exit status code

  [[ "$3" -eq 0 ]] && return "$BO_E_Ok"
  report $1 $2 $3 'Last command failed'
}
export -f reportOnFail

###################################################################################################
# Return, but do NOT exit, with a success code
return "$BO_E_Ok"

###################################################################################################
: <<'DisabledContent'
DisabledContent

