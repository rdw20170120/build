#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace

####################################################################################################
# Verify pre-conditions

[[ -z "$BO_E_Config" ]] && echo 'FATAL: Missing $BO_E_Config' && return 63
[[ -z "$BO_E_Ok"     ]] && echo 'FATAL: Missing $BO_E_Ok'     && return "$BO_E_Config"
[[ -z "$BO_E_Usage"  ]] && echo 'FATAL: Missing $BO_E_Usage'  && return "$BO_E_Config"

###################################################################################################

parameterRequire () {
  # Require parameter passed as $1, indexed as $2, and described as $3;
  # abort if missing
  parametersRequire 3 "$#"
  # $1 = actual parameter value (may be null)
  valueRequire "$2" 'parameter index'
  valueRequire "$3" 'description'

  abortIfMissing "$1" $FUNCNAME $LINENO "Missing parameter $2: $3!"
}
export -f parameterRequire

parametersRequire () {
  # Require exactly $1 parameters to calling function/script
  [[ "$#" -ne 2 ]] && Oops && exit "$BO_E_Usage"
  valueRequire "$1" 'required parameter count'
  valueRequire "$2" 'actual parameter count'

  [[ "$2" -eq "$1" ]] && return "$BO_E_Ok"
  # TODO: FIX: Replace exit status of 100 with something more meaningful...
  abort 100 $FUNCNAME $LINENO "'$2' parameters were passed when exactly '$1' are required!"
}
export -f parametersRequire

parametersRequireAtLeast () {
  # Require at least $1 parameters to calling function/script
  parametersRequire 2 "$#"
  valueRequire "$1" 'required parameter count'
  valueRequire "$2" 'actual parameter count'

  [[ "$2" -ge "$1" ]] && return "$BO_E_Ok"
  # TODO: FIX: Replace exit status of 100 with something more meaningful...
  abort 100 $FUNCNAME $LINENO "'$2' parameters were passed when at least '$1' are required!"
}
export -f parametersRequireAtLeast

valueRequire () {
  # Require value $1 described as $2, abort if missing (resolves to null)
  [[ "$#" -ne 2 ]] && Oops && exit "$BO_E_Usage"
  # $1 = value that is required
  # $2 = description for value

  abortIfMissing "$1" $FUNCNAME $LINENO "Value for '$2' is missing (non-null)!"
}
export -f valueRequire

variableRequire () {
  # Require variable $1, abort if it is missing
  # TODO: Can variable be defined, but have no value (I think so)?
  parametersRequire 1 "$#"
  parameterRequire  "$1" 1 'name of variable that is required'

  declare Name=$1
  declare Value="${!Name}"
  [[ -n "${Value}" ]] && return "$BO_E_Ok"
  # TODO: FIX: Replace exit status of 100 with something more meaningful...
  abort 100 $FUNCNAME $LINENO "Variable '$1' is required (defined and non-null)!"
}
export -f variableRequire

variableTrace () {
  # Trace variable $1, showing its value or that it is missing
  parametersRequire 1 "$#"
  parameterRequire  "$1" 1 'name of variable to be traced'

  declare Name=$1
  declare Value="${!Name}"
  if [[ -z "${Value}" ]] ; then
    logWarn "Variable '$Name' is missing"
  else
    logInfo "Variable '$Name' = '$Value'"
  fi
}
export -f variableTrace

###################################################################################################
# Return, but do NOT exit, with a success code
return "$BO_E_Ok"

###################################################################################################
: <<'DisabledContent'
DisabledContent

