#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace

####################################################################################################
# NOTE:  Uses ANSI coloring
# NOTE:  Logging priorities are implicitly ordered as:
#        Debug < Info < Warn < Error < Fatal

###################################################################################################
# Verify pre-conditions

[[ -z "$BO_E_Config"      ]] && echo 'FATAL: Missing $BO_E_Config'      && return 63
[[ -z "$BO_E_Ok"          ]] && echo 'FATAL: Missing $BO_E_Ok'          && return "$BO_E_Config"
[[ -z "$BO_E_Usage"       ]] && echo 'FATAL: Missing $BO_E_Usage'       && return "$BO_E_Config"
[[ -z "$BO_E_Unavailable" ]] && echo 'FATAL: Missing $BO_E_Unavailable' && return "$BO_E_Config"
[[ -z "$BO_Home"          ]] && echo 'FATAL: Missing $BO_Home'          && return "$BO_E_Config"

###################################################################################################
# Remember ANSI color escape sequences for our logging priorities

Script="$(dirname $BASH_SOURCE)/../../invocation/color.bash"
[[ ! -f "${Script}" ]] && echo "FATAL: Missing script '${Script}'" && return "$BO_E_Unavailable"
export BO_ColorOff="$(${Script} off)"
export BO_ColorDebug="$(${Script} magenta black)"
export BO_ColorInfo="$(${Script} green black)"
export BO_ColorWarn="$(${Script} cyan black)"
export BO_ColorError="$(${Script} yellow black)"
export BO_ColorFatal="$(${Script} red black)"

###################################################################################################

_log () {
  # Log the message $1 to STDERR
  # NOTE:  Should only be called from this script
  [[ "$#" -ne 1 ]] && Oops && exit "$BO_E_Usage"
  # $1 = message

  declare -r Msg="${1:-No message provided.}"
  echo -e "${Msg}" >&2
}
export -f _log

_logFatal () {
  # Log a fatal message $1
  # NOTE:  Should only be called from abort()
  [[ "$#" -ne 1 ]] && Oops && exit "$BO_E_Usage"
  # $1 = message

  _logWithPriority "$1" 'FATAL: ' "$BO_ColorFatal"
}
export -f _logFatal

_logWithPriority () {
  # Log with priority $2 colorized as $3 the message $1
  # NOTE:  Should only be called from this script
  [[ "$#" -ne 3 ]] && Oops && exit "$BO_E_Usage"
  # $1 = message
  # $2 = priority (short text prefix)
  # $3 = ANSI color specification

  _log "$3$2$1$BO_ColorOff"
}
export -f _logWithPriority

dumpBash () {
  # Dump BASH variables
  logDebug 'Dumping BASH variables...'
  trace BASH
  trace BASH_ALIASES
  trace BASH_ARGC
  trace BASH_ARGV
  trace BASH_CMDS
  trace BASH_COMMAND
  trace BASH_COMPLETION_COMPAT_DIR
  trace BASH_ENV
  trace BASH_EXECUTION_STRING
  trace BASH_LINENO
  trace BASH_REMATCH
  trace BASH_SOURCE
  trace BASH_SUBSHELL
  trace BASH_VERSINFO[0]
  trace BASH_VERSINFO[1]
  trace BASH_VERSINFO[2]
  trace BASH_VERSINFO[3]
  trace BASH_VERSINFO[4]
  trace BASH_VERSINFO[5]
  trace BASH_VERSION
  trace BASHOPTS
  trace BASHPID
  trace CDPATH
  trace DIRSTACK
  trace EUID
  trace FUNCNAME
  trace GLOBIGNORE
  trace GROUPS
  trace HOSTNAME
  trace HOSTTYPE
  trace IFS
  trace IGNOREEOF
  trace LC_COLLATE
  trace LC_CTYPE
  trace LINENO
  trace MACHTYPE
  trace OLDPWD
  trace OSTYPE
  trace PATH
  trace PIPESTATUS
  trace PPID
  trace PROMPT_COMMAND
  trace PS1
  trace PS2
  trace PS3
  trace PS4
  trace PWD
  trace REPLY
  trace SECONDS
  trace SHELL
  trace SHELLOPTS
  trace SHLVL
  trace TMOUT
  trace UID

  # Others
  trace COLORTERM
  trace COLUMNS
  trace DEFAULTS_PATH
  trace DISPLAY
  trace EDITOR
  trace GROUPS
  trace HISTCMD
  trace HISTCONTROL
  trace HISTFILE
  trace HISTFILESIZE
  trace HISTSIZE
  trace HOME
  trace LANG
  trace LESSCLOSE
  trace LESSOPEN
  trace LINES
  trace LOGNAME
  trace LS_COLORS
  trace MAILCHECK
  trace MANDATORY_PATH
  trace OPTERR
  trace OPTIND
  trace RANDOM
  trace SECONDS
  trace SSH_AGENT_PID
  trace SSH_AUTH_SOCK
  trace TERM
  trace TMPDIR
  trace USER
  trace USERNAME
  trace WINDOWID
  trace WINDOWPATH
}
export -f dumpBash

logDebug () {
  # Log a debugging message $1
  [[ "$#" -ne 1 ]] && Oops && exit "$BO_E_Usage"
  # $1 = message

  _logWithPriority "$1" 'DEBUG: ' "$BO_ColorDebug"
}
export -f logDebug

logError () {
  # Log an error message $1
  [[ "$#" -ne 1 ]] && Oops && exit "$BO_E_Usage"
  # $1 = message

  _logWithPriority "$1" 'ERROR: ' "$BO_ColorError"
}
export -f logError

logInfo () {
  # Log an informational message $1
  [[ "$#" -ne 1 ]] && Oops && exit "$BO_E_Usage"
  # $1 = message

  _logWithPriority "$1" 'INFO:  ' "$BO_ColorInfo"
}
export -f logInfo

logWarn () {
  # Log a warning message $1
  [[ "$#" -ne 1 ]] && Oops && exit "$BO_E_Usage"
  # $1 = message

  _logWithPriority "$1" 'WARN:  ' "$BO_ColorWarn"
}
export -f logWarn

Oops () {
  # Echo to STDERR that an Oops occurred
  # NOTE:  This is used to indicate an error in low-level code such as this
  # logging infrastructure that is then used to support error handling in
  # other higher-level code.

  echo "Oops!" >&2
}
export -f Oops

trace () {
  # Trace variable $1
  [[ "$#" -ne 1 ]] && Oops && exit "$BO_E_Usage"
  # $1 = name of variable to trace

  declare -r Name=$1
  declare -r Value="${!Name}"
  logDebug "${Name}='${Value}'"
}
export -f trace

###################################################################################################
# Return, but do NOT exit, with a success code
return "$BO_E_Ok"

###################################################################################################
: <<'DisabledContent'
DisabledContent
