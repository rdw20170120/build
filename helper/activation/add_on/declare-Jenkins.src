#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$0'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace

####################################################################################################
# Declare BASH functionality for the Jenkins continuous integration server
# TODO: Integrate with latest framework

Jenkins_findBuild() {
  # Return whether found Jenkins build for job $2, and save to file $1 if found
  parametersRequire "$FUNCNAME" "$LINENO" 2 "$#"
  parameterRequire  "$FUNCNAME" "$LINENO" "$1" 1 'build number file'
  parameterRequire  "$FUNCNAME" "$LINENO" "$2" 2 'Jenkins URL'

  logInfo "$FUNCNAME" "$LINENO" "Getting build number from '$2'..."
  Number=$(Jenkins_getBuildNumber "$2")
  Jenkins_saveBuildNumber "$1" "${Number}"
}

Jenkins_getArtifact () {
  # Get the Jenkins build artifact from URL $1 as file $2
  parametersRequire "$FUNCNAME" "$LINENO" 2 "$#"
  parameterRequire  "$FUNCNAME" "$LINENO" "$1" 1 'artifact target file'
  parameterRequire  "$FUNCNAME" "$LINENO" "$2" 2 'artifact URL'

  if fileExists "$1"; then
    logWarn "$FUNCNAME" "$LINENO" "Artifact $1 already exists, skipping get!"
  else
    logInfo "$FUNCNAME" "$LINENO" "Getting artifact file '$1' from '$2'..."
    curl -L# "$2" > "$1"
    abortOnFail "$FUNCNAME" "$LINENO" "$?"
    fileRequire "$1"
  fi
}

Jenkins_getBuildNumber () {
  # Return the Jenkins build number for job $1
  # NOTE:  Designed to return result via standard output
  parametersRequire "$FUNCNAME" "$LINENO" 1 "$#"
  parameterRequire  "$FUNCNAME" "$LINENO" "$1" 1 'Jenkins job'

  declare -r Number=$(curl -Ls "$1")
  abortOnFail "$FUNCNAME" "$LINENO" "$?"
  echo "${Number}"
}

Jenkins_saveBuildNumber() {
  # Save Jenkins build number $2 to file $1
  parametersRequire "$FUNCNAME" "$LINENO" 2 "$#"
  parameterRequire  "$FUNCNAME" "$LINENO" "$1" 1 'target file'
  parameterRequire  "$FUNCNAME" "$LINENO" "$2" 2 'build number'

  logInfo "$FUNCNAME" "$LINENO" "Saving build number '$2' in file '$1'..."
  echo "$2" > "$1"
  fileRequire "$1"
}
