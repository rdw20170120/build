#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# Verify pre-conditions

[[ -z "$BO_E_Config"      ]] && echo 'FATAL: Missing $BO_E_Config'      && return 63
[[ -z "$BO_E_Ok"          ]] && echo 'FATAL: Missing $BO_E_Ok'          && return "$BO_E_Config"
[[ -z "$BO_E_Usage"       ]] && echo 'FATAL: Missing $BO_E_Usage'       && return "$BO_E_Config"

###################################################################################################

directoryCreate () {
  # Create directory $1, but not if it exists
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'target directory'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  if directoryExists "$1" ; then
    logDebug "Directory '$1' exists, skipping creation!"
  else
    logInfo "Creating directory '$1'..."
    mkdir -p "$1"
    abortOnFail $FUNCNAME $LINENO $?
  fi
  directoryRequire "$1"
}
export -f directoryCreate

directoryExists () {
  # Return whether directory $1 exists, abort if it is not creatable
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'target directory'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  [[   -d "$1" ]] && \
    logDebug "Found directory '$1'" && return "$BO_E_Ok"
  # TODO: FIX: Replace exit status of 100 with something more meaningful...
  [[   -e "$1" ]] && \
    abort $FUNCNAME $LINENO 100 "Found non-directory '$1'"
  return 63 # $1 does not exist, but appears to be creatable
}
export -f directoryExists

directoryRecreate () {
  # Recreate (remove & create) directory $1, forced
  parametersRequire 1 $#
  parameterRequire "$1" 1 'directory'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  directoryRemove $1
  directoryCreate $1
} && export -f directoryRecreate

directoryRemove () {
  # Remove directory $1, forced
  parametersRequire 1 $#
  parameterRequire "$1" 1 'directory'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  rm -fr $1
  abortOnFail $FUNCNAME $LINENO $?
} && export -f directoryRemove

directoryRequire () {
  # Require that directory $1 exists, abort if not
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'target directory'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  directoryExists "$1" && return "$BO_E_Ok"
  # TODO: FIX: Replace exit status of 100 with something more meaningful...
  abort $FUNCNAME $LINENO 100 "Required directory '$1' must exist!"
}
export -f directoryRequire

fileChangeGroup () {
  # Change ownership of file $2 to group $1
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'group'
  parameterRequire "$2" 2 'target file'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  # TODO:  Test existence of group $1
  fileRequire "$2"
  logInfo "Changing owner of file '$2' to group '$1'..."
  chgrp "$1" "$2"
  abortOnFail $FUNCNAME $LINENO $?
}
export -f fileChangeGroup

fileCopy () {
  # Copy source file $1 to target file $2, but not if it exists
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'source file'
  parameterRequire "$2" 2 'target file'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  fileRequire "$1"
  if fileExists "$2" ; then
    logDebug "File '$2' exists, skipping copy of file '$1'!"
  else
    logInfo "Copying file '$2' from file '$1'..."
    cp "$1" "$2"
    abortOnFail $FUNCNAME $LINENO $?
  fi
  fileRequire "$2"
}
export -f fileCopy

fileCopyForce () {
  # Copy source file $1 to target file $2, EVEN if it exists
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'source file'
  parameterRequire "$2" 2 'target file'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  fileRequire "$1"
  if fileExists "$2" ; then
    logWarn "File '$2' exists, overwriting!"
  fi
  logInfo "Copying file '$2' from file '$1'..."
  cp "$1" "$2"
  abortOnFail $FUNCNAME $LINENO $?
  fileRequire "$2"
}
export -f fileCopyForce

filesCopy () {
  # Copy all files in source directory $1 to target directory $2
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'source directory'
  parameterRequire "$2" 2 'target directory'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  directoryRequire "$1"
  # if directoryExists "$2" ; then
    logInfo "Copying directory '$2' from directory '$1'..."
    cp -R $1/* $2/
    abortOnFail $FUNCNAME $LINENO $?
  # fi
  directoryRequire "$2"
}
export -f filesCopy

fileExists () {
  # Return whether file $1 exists, abort if it is not creatable
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'target file'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  [[   -f "$1" ]] && \
    logDebug "Found file '$1'" && return "$BO_E_Ok"
  # TODO: FIX: Replace exit status of 100 with something more meaningful...
  [[   -e "$1" ]] && \
    abort $FUNCNAME $LINENO 100 "Found non-file '$1'"
  return 63 # $1 does not exist, but appears to be creatable
}
export -f fileExists

fileMove () {
  # Move source file $1 to target file $2, but not if it exists
  parametersRequire 2 "$#"
  parameterRequire "$1" 1 'source file'
  parameterRequire "$2" 2 'target file'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  fileRequire "$1"
  if fileExists "$2" ; then
    logError "File '$2' exists, skipping move of file '$1'!"
  else
    logInfo "Moving file '$2' from file '$1'..."
    mv "$1" "$2"
    abortOnFail $FUNCNAME $LINENO $?
  fi
  # TODO:  Check that file $1 is gone?
  fileRequire "$2"
}
export -f fileMove

fileRequire () {
  # Require that file $1 exists, abort if not
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'target file'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  fileExists "$1" && return "$BO_E_Ok"
  # TODO: FIX: Replace exit status of 100 with something more meaningful...
  abort $FUNCNAME $LINENO 100 "Required file '$1' must exist!"
}
export -f fileRequire

filesMakeExecutable () {
  # Make the files executable within directory $1
  parametersRequire 1 "$#"
  parameterRequire "$1" 1 'target directory'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  directoryRequire "$1"
  logInfo "Making files executable in directory '$1'..."
  chmod -R u+x "$1"
  abortOnFail $FUNCNAME $LINENO $?
}
export -f filesMakeExecutable

getPathAbsolute () {
  # Get absolute (canonical) path for the pathname $1
  # $1 = pathname

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  # TODO: echo "$1"
  if [ -d "$1" ]; then
    # dir
    (cd "$1"; pwd)
  elif [ -f "$1" ]; then
    # file
    if [[ $1 == */* ]]; then
      echo "$(cd "${1%/*}"; pwd)/${1##*/}"
    else
      echo "$(pwd)/$1"
    fi
  fi
} && export -f getPathAbsolute

scriptExecute () {
  # Execute script file $3, aborting on failure
  parametersRequireAtLeast 3 $#
  parameterRequire "$1" 1 'caller file/function (via $FUNCNAME or $BASH_SOURCE or $0)'
  parameterRequire "$2" 2 'caller line number (via $LINENO)'
  parameterRequire "$3" 3 'script file to be executed'

  # BROKEN: abort $BASH_SOURCE:$FUNCNAME $LINENO 125 "Forced abort for testing"
  # BROKEN: abort ${BASH_SOURCE[0]}:${FUNCNAME[0]} $LINENO 125 "Forced abort for testing"
  # WRONG: abort $0:$FUNCNAME $LINENO 125 "Forced abort for testing"
  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  local -r Caller=$1
  local -r Line=$2
  local -r Script=$3
  shift 3
  scriptRequire $Caller $Line $Script
  $Script $@
  abortOnFail $Caller $Line $?
} && export -f scriptExecute

scriptRequire () {
  # Require script file $3
  parametersRequireAtLeast 3 $#
  parameterRequire "$1" 1 'caller file/function (via $FUNCNAME or $BASH_SOURCE or $0)'
  parameterRequire "$2" 2 'caller line number (via $LINENO)'
  parameterRequire "$3" 3 'required script file'

  # abort $FUNCNAME $LINENO 125 "Forced abort for testing"

  fileRequire $3
} && export -f scriptRequire

###################################################################################################
: <<'DisabledContent'
  # TODO:  Refactor & redesign

fileCopyMaybe () {
  # Copy file $1 to directory $2 as $3, but not if it exists
  # $1 = pathname of source file
  # $2 = name of target directory
  # $3 = name of target file
  [[   -f "$2/$3" ]] && logInfo  "Found file $2/$3"           && return "$BO_E_Ok"
  [[ ! -e "$1"    ]] && logError "Pathname $1 does not exist" && return 63
  [[ ! -f "$1"    ]] && logError "Found non-file $1"          && return 2
  directoryCreateMaybe "$2"
  directoryExists "$2" && cp "$1" "$2/$3" && logInfo "Created $2/$3"
}

directoryCreateMaybe () {
  # Create directory $1, but not if it exists
  # $1 = pathname of directory to create
  maybeDirectoryExists "$1" && return "$BO_E_Ok"
  pathExistsNot "$1" && mkdir -p "$1" && logInfo "Created $1"
  directoryExists "$1"
}

maybeDirectoryExists () {
  # Return pathname $1 does not exist or is a directory
  # $1 = pathname that could be a directory or not exist
  [[ -d "$1" ]] && logInfo  "Found directory $1"     && return "$BO_E_Ok"
  [[ -e "$1" ]] && logError "Found non-directory $1" && return 2
  logInfo "Pathname $1 does not exist"               && return 63
}

pathExistsNot () {
  # Verify that pathname $1 does not exist
  # $1 = pathname that should not exist
  [[ -e "$1" ]] && logError "Pathname $1 should not exist" && return 63
  return "$BO_E_Ok"
}
DisabledContent

