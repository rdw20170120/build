#!/bin/cat
[[ -n "$BO_Trace" ]] && echo "TRACE: Executing '$BASH_SOURCE'"
####################################################################################################
# NOTE: Assumes this project has been activated using the BriteOnyx framework.
# NOTE: We MUST NOT EVER invoke the 'exit' command from BASH functions
####################################################################################################
# NOTE: Uncomment the following two lines for debugging
# set -o verbose
# set -o xtrace

####################################################################################################
# Declare exit status codes for use in BASH scripts

###################################################################################################
# REF: http://tldp.org/LDP/abs/html/exitcodes.html
#
#   0    success (no error)
#   1    general catchall
#   2    misuse of shell built-ins
# 126    cannot execute the invoked command
# 127    command not found
# 128    invalid argument to 'exit' (must be 0-255)
# 128+n  fatal error signal "n" was received (129-165)
# 130    terminated by Control-C signal (130 = 128 + 2)
# 255    'exit' status out-of-range (must be 0-255)

###################################################################################################
# Declare system-defined exit status codes

declare -irx BO_E_Ok=0
declare -irx BO_E_CatchAll=1
declare -irx BO_E_BuiltinMisuse=2
declare -irx BO_E_CannotExecute=126
declare -irx BO_E_CommandNotFound=127
declare -irx BO_E_ExitArgIsInvalid=128
declare -irx BO_E_SignalBase=128
declare -irx BO_E_SignalUserInterrupt=130
declare -irx BO_E_ExitArgIsOutOfRange=255

###################################################################################################
# REF: /usr/include/sysexits.h on Linux Mint 15
#
# SYSEXITS.H -- Exit status codes for system programs.
#
# This include file attempts to categorize possible error exit statuses for system programs,
# notably delivermail and the Berkeley network.
#
# Error numbers begin at EX__BASE to reduce the possibility of clashing with other exit statuses
# that random programs may already return.  The meaning of the codes is approximately as follows:
#
# EX_USAGE -- The command was used incorrectly, e.g., with the wrong number of arguments, a bad
#   flag, a bad syntax in a parameter, or whatever.
# EX_DATAERR -- The input data was incorrect in some way.  This should only be used for user's
#   data & not system files.
# EX_NOINPUT -- An input file (not a system file) did not exist or was not readable.  This could
#   also include errors like "No message" to a mailer (if it cared to catch it).
# EX_NOUSER -- The user specified did not exist.  This might be used for mail addresses or remote
#   logins.
# EX_NOHOST -- The host specified did not exist.  This is used in mail addresses or network
#   requests.
# EX_UNAVAILABLE -- A service is unavailable.  This can occur if a support program or file does
#   not exist.  This can also be used as a catchall message when something you wanted to do
#   doesn't work, but you don't know why.
# EX_SOFTWARE -- An internal software error has been detected.  This should be limited to non-
#   operating system related errors as possible.
# EX_OSERR -- An operating system error has been detected.  This is intended to be used for such
#   things as "cannot fork", "cannot create pipe", or the like.  It includes things like getuid
#   returning a user that does not exist in the passwd file.
# EX_OSFILE -- Some system file (e.g., /etc/passwd, /etc/utmp, etc.) does not exist, cannot be
#   opened, or has some sort of error (e.g., syntax error).
# EX_CANTCREAT -- A (user specified) output file cannot be created.
# EX_IOERR -- An error occurred while doing I/O on some file.
# EX_TEMPFAIL -- temporary failure, indicating something that is not really an error.  In
#   sendmail, this means that a mailer (e.g.) could not create a connection, and the request
#   should be reattempted later.
# EX_PROTOCOL -- the remote system returned something that was "not possible" during a protocol
#   exchange.
# EX_NOPERM -- You did not have sufficient permission to perform the operation.  This is not
#   intended for file system problems, which should use NOINPUT or CANTCREAT, but rather for
#   higher level permissions.
#
#define EX_OK           0  /* successful termination */
#
#define EX__BASE       64  /* base value for error messages */
#
#define EX_USAGE       64  /* command line usage error */
#define EX_DATAERR     65  /* data format error */
#define EX_NOINPUT     66  /* cannot open input */
#define EX_NOUSER      67  /* addressee unknown */
#define EX_NOHOST      68  /* host name unknown */
#define EX_UNAVAILABLE 69  /* service unavailable */
#define EX_SOFTWARE    70  /* internal software error */
#define EX_OSERR       71  /* system error (e.g., can't fork) */
#define EX_OSFILE      72  /* critical OS file missing */
#define EX_CANTCREAT   73  /* can't create (user) output file */
#define EX_IOERR       74  /* input/output error */
#define EX_TEMPFAIL    75  /* temp failure; user is invited to retry */
#define EX_PROTOCOL    76  /* remote error in protocol */
#define EX_NOPERM      77  /* permission denied */
#define EX_CONFIG      78  /* configuration error */
#
#define EX__MAX        78  /* maximum listed value */

###################################################################################################
# Declare user-defined exit status codes

declare -irx BO_E_UserBase=64
declare -irx BO_E_Usage=$((        $BO_E_UserBase +  0 ))
declare -irx BO_E_DataFormat=$((   $BO_E_UserBase +  1 ))
declare -irx BO_E_NoInput=$((      $BO_E_UserBase +  2 ))
declare -irx BO_E_NoUser=$((       $BO_E_UserBase +  3 ))
declare -irx BO_E_NoHost=$((       $BO_E_UserBase +  4 ))
declare -irx BO_E_Unavailable=$((  $BO_E_UserBase +  5 ))
declare -irx BO_E_Software=$((     $BO_E_UserBase +  6 ))
declare -irx BO_E_System=$((       $BO_E_UserBase +  7 ))
declare -irx BO_E_NoSystemFile=$(( $BO_E_UserBase +  8 ))
declare -irx BO_E_CannotCreate=$(( $BO_E_UserBase +  9 ))
declare -irx BO_E_InOut=$((        $BO_E_UserBase + 10 ))
declare -irx BO_E_Temporary=$((    $BO_E_UserBase + 11 ))
declare -irx BO_E_Protocol=$((     $BO_E_UserBase + 12 ))
declare -irx BO_E_Denied=$((       $BO_E_UserBase + 13 ))
declare -irx BO_E_Config=$((       $BO_E_UserBase + 14 ))

###################################################################################################
# Verify post-conditions

[[ -z "$BO_E_Config" ]] && echo 'FATAL: Missing $BO_E_Config' && return 63
[[ -z "$BO_E_Ok"     ]] && echo 'FATAL: Missing $BO_E_Ok'     && return "$BO_E_Config"

###################################################################################################
# Return, but do NOT exit, with a success code
return "$BO_E_Ok"

###################################################################################################
: <<'DisabledContent'
DisabledContent
