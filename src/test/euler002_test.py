''' Project Euler Problem 2
REF:  http://projecteuler.net/index.php?section=problems&id=2
Created:  19-Oct-2001
Solved:

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
'''

import nose.tools

# Form the solution

def fibonacci(index):
    '''Return "index"th term of the Fibonacci sequence.
    
       By definition, fibonacci(1) == 1 and fibonacci(2) = 2,
       so extend to fibonacci(0) == 1 for completeness.
    '''
    if 0 == index:
        return 1
    elif 1 == index:
        return 1
    elif 0 > index:
        raise IndexError(
            "Index '{0}' is below zero and therefore invalid!".format(index)
        )
    else:
        return fibonacci(index - 1) + fibonacci(index - 2)

# Test the solution

def test_given_terms():
    '''Test given terms of Fibonacci sequence.'''
    assert  1 == fibonacci( 1)
    assert  2 == fibonacci( 2)
    assert  3 == fibonacci( 3)
    assert  5 == fibonacci( 4)
    assert  8 == fibonacci( 5)
    assert 13 == fibonacci( 6)
    assert 21 == fibonacci( 7)
    assert 34 == fibonacci( 8)
    assert 55 == fibonacci( 9)
    assert 89 == fibonacci(10)

@nose.tools.raises(IndexError)
def test_invalid_index_is_rejected():
    '''Test that an invalid index is rejected.'''
    fibonacci(-1)

def test_zero_term():
    '''Test the zeroth term of the Fibonacci sequence.'''
    assert 1 == fibonacci(0)

# Report the solution
